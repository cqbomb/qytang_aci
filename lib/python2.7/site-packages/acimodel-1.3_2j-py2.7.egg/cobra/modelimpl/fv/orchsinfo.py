# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class OrchsInfo(Mo):
    """
    The orchestration information is used to store orchestration specific properties such as Microsoft Azure Pack.

    """

    meta = ClassMeta("cobra.model.fv.OrchsInfo")

    meta.moClassName = "fvOrchsInfo"
    meta.rnFormat = "Orchs-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Orchestrator configuration for this EPG"
    meta.writeAccessMask = 0x401
    meta.readAccessMask = 0x401
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fv.OptedPlanSrvc")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.OrchsLBCfg")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.OrchsLBCfg", "LBCfg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.OptedPlanSrvc", "srvc-"))

    meta.parentClasses.add("cobra.model.fv.AEPg")
    meta.parentClasses.add("cobra.model.infra.CEPg")
    meta.parentClasses.add("cobra.model.l2ext.InstP")
    meta.parentClasses.add("cobra.model.vns.REPpInfo")
    meta.parentClasses.add("cobra.model.vns.SHEPpInfo")
    meta.parentClasses.add("cobra.model.vns.EPpInfo")
    meta.parentClasses.add("cobra.model.mgmt.InB")
    meta.parentClasses.add("cobra.model.l3ext.InstP")
    meta.parentClasses.add("cobra.model.vns.SDEPpInfo")
    meta.parentClasses.add("cobra.model.infra.PEPg")
    meta.parentClasses.add("cobra.model.dhcp.PRelPg")
    meta.parentClasses.add("cobra.model.dhcp.CRelPg")
    meta.parentClasses.add("cobra.model.l3ext.InstPDef")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('Orchs-', True),
    ]

    prop = PropMeta("str", "addrNsName", "addrNsName", 16369, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("addrNsName", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cloud", "cloud", 16365, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("cloud", prop)

    prop = PropMeta("str", "deployIssues", "deployIssues", 19810, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attr-dom-not-supported", "attribute-based-epg-is-not-supported-for-the-domain-type", 131072)
    prop._addConstant("ctrlr-not-deployable", "controller-not-deployable.", 32768)
    prop._addConstant("ctrlr-unsupported", "unsupported-controller.", 16384)
    prop._addConstant("duplicate-static-encap", "duplicate-epg-encapsulation-value", 2097152)
    prop._addConstant("dvs-config-failed", "failed-to-configure-dvs.", 4096)
    prop._addConstant("dvs-error", "failed-to-get-dvs-config.", 2)
    prop._addConstant("dvs-prep-error", "dvs-preparation-error-for-vxlan.", 32)
    prop._addConstant("dvs-version-error", "could-not-get-dvs-version.", 512)
    prop._addConstant("epg-pol-enforce-missing-pri_encap", "missing-primary-encap-in-vmm-domain-relation-for-policy-enforced-epg", 8388608)
    prop._addConstant("epg-pol-enforce-unsupported", "intra-epg-isolation-is-not-supported-in-avs-vlan-mode,-dvs-vxlan-mode-or-for-microsoft-domains", 16777216)
    prop._addConstant("epg-useg-unsupported", "microsegmentation-is-not-supported-for-the-controller", 67108864)
    prop._addConstant("epp-mcast-addr-match-fabric", "epg-mcast-address-is-the-same-as-fabric-mcast-address.-domain-fabric-multicast-address-overlaps-multicast-address-pool.", 1048576)
    prop._addConstant("invalid-encap", "no-valid-encapsulation-identifier-allocated-for-the-epg", 1)
    prop._addConstant("invalid-mcast-addr", "no-valid-mcast-address-allocated-for-the-epg", 65536)
    prop._addConstant("invalid-static-encap", "epg-encapsulation-value-is-not-part-of-any-static-encapsulation-block-for-the-vmm-domain", 524288)
    prop._addConstant("invalid-usegepg-configuration", "invalid-useg-epg-configuration.-a-non-useg-epg-exists-under-the-same-tenant", 4194304)
    prop._addConstant("invalid-usegepg-encap", "primary-encap-property-and-encap-property-both-need-to-be-set", 33554432)
    prop._addConstant("invalid-vip", "vip-has-not-been-allocated", 262144)
    prop._addConstant("lacp-apply-failed", "lacp-update-for-portgroup-failed.", 2048)
    prop._addConstant("no-ctrlr-dn", "controller-dn-missing.", 256)
    prop._addConstant("no-ctrlr-map", "controller-missing-from-internal-map.", 128)
    prop._addConstant("none", "n/a", 0)
    prop._addConstant("pg-api-error", "portgroup-property-get-api-failed.", 1024)
    prop._addConstant("policy-not-found", "failed-to-find-policy-container-for-controller.", 8192)
    prop._addConstant("prep-vxlan-error", "vxlan-cluster-preparation-error.", 8)
    prop._addConstant("proc-vmm-error", "cluster-type-object-missing-from-controller.", 16)
    prop._addConstant("unsupported-ctrlr", "invalid-controller-scope.", 64)
    prop._addConstant("vdn-error", "network-scope-creation-error.", 4)
    meta.props.add("deployIssues", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 19811, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16374, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "needVip", "needVip", 16367, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("needVip", prop)

    prop = PropMeta("str", "plan", "plan", 16366, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("plan", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "usrAcc", "usrAcc", 16364, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("usrAcc", prop)

    prop = PropMeta("str", "vip", "vip", 16368, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("vip", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

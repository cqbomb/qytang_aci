# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class ACCfgRel(Mo):
    meta = ClassMeta("cobra.model.vns.ACCfgRel")

    meta.isAbstract = True
    meta.moClassName = "vnsACCfgRel"


    meta.moClassName = "vnsACCfgRel"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "Relation to L4-L7 Services Param Relation Abstract Class"
    meta.writeAccessMask = 0x6000000000000001
    meta.readAccessMask = 0x6000000000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vns.RsCfgToConn")
    meta.childClasses.add("cobra.model.vns.RsCfgToVConn")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsCfgToVConn", "rsCfgToVConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vns.RsCfgToConn", "rsCfgToConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.Ap")
    meta.parentClasses.add("cobra.model.vns.EPpInfo")
    meta.parentClasses.add("cobra.model.vns.AbsGrpCfg")
    meta.parentClasses.add("cobra.model.vns.SDEPpInfo")
    meta.parentClasses.add("cobra.model.vns.AbsFuncConn")
    meta.parentClasses.add("cobra.model.dhcp.PRelPg")
    meta.parentClasses.add("cobra.model.dhcp.CRelPg")
    meta.parentClasses.add("cobra.model.fv.AEPg")
    meta.parentClasses.add("cobra.model.l2ext.InstP")
    meta.parentClasses.add("cobra.model.vns.SHEPpInfo")
    meta.parentClasses.add("cobra.model.l3ext.InstP")
    meta.parentClasses.add("cobra.model.infra.PEPg")
    meta.parentClasses.add("cobra.model.vns.GrpCfgInst")
    meta.parentClasses.add("cobra.model.vns.AbsFuncCfg")
    meta.parentClasses.add("cobra.model.infra.CEPg")
    meta.parentClasses.add("cobra.model.vns.REPpInfo")
    meta.parentClasses.add("cobra.model.vns.FuncCfgInst")
    meta.parentClasses.add("cobra.model.vns.FuncConnInst")
    meta.parentClasses.add("cobra.model.vns.DevCfgInst")
    meta.parentClasses.add("cobra.model.vns.AbsDevCfg")
    meta.parentClasses.add("cobra.model.fv.Tenant")
    meta.parentClasses.add("cobra.model.fv.BD")
    meta.parentClasses.add("cobra.model.fv.Ctx")
    meta.parentClasses.add("cobra.model.mgmt.InB")
    meta.parentClasses.add("cobra.model.vns.CfgRoot")
    meta.parentClasses.add("cobra.model.l3ext.InstPDef")

    meta.superClasses.add("cobra.model.vns.AL4L7ServiceFault")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.vns.ACCfg")

    meta.concreteSubClasses.add("cobra.model.vns.GRel")
    meta.concreteSubClasses.add("cobra.model.vns.CfgRelInst")
    meta.concreteSubClasses.add("cobra.model.vns.AbsCfgRel")
    meta.concreteSubClasses.add("cobra.model.vns.CRel")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "cardinality", "cardinality", 5165, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("1", "1", 1)
    prop._addConstant("n", "n", 2)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("cardinality", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "faultCode", "faultCode", 5135, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("faultCode", prop)

    prop = PropMeta("str", "faultMessage", "faultMessage", 5137, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("faultMessage", prop)

    prop = PropMeta("str", "faultSeverity", "faultSeverity", 5136, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 3
    prop.defaultValueStr = "minor"
    prop._addConstant("cleared", "cleared", 0)
    prop._addConstant("critical", "critical", 5)
    prop._addConstant("info", "info", 1)
    prop._addConstant("major", "major", 4)
    prop._addConstant("minor", "minor", 3)
    prop._addConstant("warning", "warning", 2)
    meta.props.add("faultSeverity", prop)

    prop = PropMeta("str", "key", "key", 5163, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("key", prop)

    prop = PropMeta("str", "locked", "locked", 5164, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("locked", prop)

    prop = PropMeta("str", "mandatory", "mandatory", 5005, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("mandatory", prop)

    prop = PropMeta("str", "metaItemDn", "metaItemDn", 5166, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("metaItemDn", prop)

    prop = PropMeta("str", "name", "name", 5162, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcDn", "srcDn", 5167, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("srcDn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "targetName", "targetName", 5006, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("targetName", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsFuncProfContrToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsNodeToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("NodeInstToNwIf", "Physical Interfaces", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsFuncProfContrToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AbsNodeToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("NodeInstToCompVNic", "Virtual Nics", "cobra.model.comp.VNic"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("AEPgToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ApToNwIf", "Application Profile to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("InBToNode", "Node", "cobra.model.fv.Locale"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("EPgToNwIf", "Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("CtxToNwIf", "Private Network to Interface", "cobra.model.nw.If"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("BDToNwIf", "Bridge Domain to Interface", "cobra.model.nw.If"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

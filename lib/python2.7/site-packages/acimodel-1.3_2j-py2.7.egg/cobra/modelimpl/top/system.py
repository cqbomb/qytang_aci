# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class System(Mo):
    """
    The APIC uses a policy model to combine data into a health score. Health scores can be aggregated for a variety of areas such as for the infrastructure, applications, or services. The category health score is calculated using a Lp -Norm formula. The health score penalty equals 100 minus the health score. The health score penalty represents the overall health score penalties of a set of MOs that belong to a given category and are children or direct relatives of the MO for which a health score is being calculated.

    """

    meta = ClassMeta("cobra.model.top.System")

    meta.moClassName = "topSystem"
    meta.rnFormat = "sys"
    meta.category = MoCategory.REGULAR
    meta.label = "System"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x79ffffffffffffff
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.top.RtTrSrc")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.cap.Cat")
    meta.childClasses.add("cobra.model.opflex.OeHupTrigger")
    meta.childClasses.add("cobra.model.top.RsSystemRack")
    meta.childClasses.add("cobra.model.im.Entity")
    meta.childClasses.add("cobra.model.sysdebug.TechSupFileRepository")
    meta.childClasses.add("cobra.model.opflex.ODevRefCont")
    meta.childClasses.add("cobra.model.lldp.Entity")
    meta.childClasses.add("cobra.model.span.Acct")
    meta.childClasses.add("cobra.model.ospf.Entity")
    meta.childClasses.add("cobra.model.ipv6.Entity")
    meta.childClasses.add("cobra.model.pc.Entity")
    meta.childClasses.add("cobra.model.eqptdiag.Entity")
    meta.childClasses.add("cobra.model.ac.Entity")
    meta.childClasses.add("cobra.model.top.RsMonPolSystemPolCons")
    meta.childClasses.add("cobra.model.action.LCont")
    meta.childClasses.add("cobra.model.arp.Entity")
    meta.childClasses.add("cobra.model.l3cap.Prov")
    meta.childClasses.add("cobra.model.monitor.Entity")
    meta.childClasses.add("cobra.model.pc.AggrIf")
    meta.childClasses.add("cobra.model.eqpt.Ch")
    meta.childClasses.add("cobra.model.firmware.FwStatusCont")
    meta.childClasses.add("cobra.model.sysdebug.CoreFileRepository")
    meta.childClasses.add("cobra.model.opflex.ODevCmdReq")
    meta.childClasses.add("cobra.model.actrlcap.Prov")
    meta.childClasses.add("cobra.model.synthetic.SwTLTestObj")
    meta.childClasses.add("cobra.model.l1cap.Prov")
    meta.childClasses.add("cobra.model.eqpt.Entity")
    meta.childClasses.add("cobra.model.span.RetryCont")
    meta.childClasses.add("cobra.model.glean.Entity")
    meta.childClasses.add("cobra.model.cdp.Entity")
    meta.childClasses.add("cobra.model.vpc.Entity")
    meta.childClasses.add("cobra.model.span.Entity")
    meta.childClasses.add("cobra.model.firmware.CtrlrFwStatusCont")
    meta.childClasses.add("cobra.model.lacp.Entity")
    meta.childClasses.add("cobra.model.copp.Entity")
    meta.childClasses.add("cobra.model.cnw.PhysIf")
    meta.childClasses.add("cobra.model.snmp.Entity")
    meta.childClasses.add("cobra.model.proc.Entity")
    meta.childClasses.add("cobra.model.firmware.CatFwStatusCont")
    meta.childClasses.add("cobra.model.uribv4.Entity")
    meta.childClasses.add("cobra.model.top.RsProtGFw")
    meta.childClasses.add("cobra.model.l2.InbandIf")
    meta.childClasses.add("cobra.model.l2cap.Prov")
    meta.childClasses.add("cobra.model.sts.Entity")
    meta.childClasses.add("cobra.model.dhcp.Entity")
    meta.childClasses.add("cobra.model.isis.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1year")
    meta.childClasses.add("cobra.model.sysmgr.Entity")
    meta.childClasses.add("cobra.model.mcp.Entity")
    meta.childClasses.add("cobra.model.dpp.Entity")
    meta.childClasses.add("cobra.model.nd.Entity")
    meta.childClasses.add("cobra.model.datetime.ClkPol")
    meta.childClasses.add("cobra.model.mldsnoop.Entity")
    meta.childClasses.add("cobra.model.top.RtTrDst")
    meta.childClasses.add("cobra.model.regress.If")
    meta.childClasses.add("cobra.model.eqpt.ExtCh")
    meta.childClasses.add("cobra.model.fabric.NodeHealth15min")
    meta.childClasses.add("cobra.model.fv.ImplicitStaleEpCont")
    meta.childClasses.add("cobra.model.fabric.SystemInfo")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist5min")
    meta.childClasses.add("cobra.model.nw.ConnGrp")
    meta.childClasses.add("cobra.model.mock.MockRoot")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1w")
    meta.childClasses.add("cobra.model.compat.SuppFw")
    meta.childClasses.add("cobra.model.actrl.Entity")
    meta.childClasses.add("cobra.model.bfd.Entity")
    meta.childClasses.add("cobra.model.dns.Entity")
    meta.childClasses.add("cobra.model.icmpv6.Entity")
    meta.childClasses.add("cobra.model.rpm.Entity")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.opflex.ODevCmdResp")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1year")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1d")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1mo")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1h")
    meta.childClasses.add("cobra.model.ospfv3.Entity")
    meta.childClasses.add("cobra.model.proc.System")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fabric.NodeHealth5min")
    meta.childClasses.add("cobra.model.top.RtTsSrc")
    meta.childClasses.add("cobra.model.top.RsNeighFw")
    meta.childClasses.add("cobra.model.l2.ExtIf")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1h")
    meta.childClasses.add("cobra.model.icmpv4.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1d")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1mo")
    meta.childClasses.add("cobra.model.coop.Entity")
    meta.childClasses.add("cobra.model.qosm.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist15min")
    meta.childClasses.add("cobra.model.bgp.Entity")
    meta.childClasses.add("cobra.model.leqpt.LooseNode")
    meta.childClasses.add("cobra.model.ipv4.Entity")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1w")
    meta.childClasses.add("cobra.model.tunnel.If")
    meta.childClasses.add("cobra.model.ethpm.Entity")
    meta.childClasses.add("cobra.model.l1.PhysIf")
    meta.childClasses.add("cobra.model.l3.Inst")
    meta.childClasses.add("cobra.model.mgmt.MgmtIf")
    meta.childClasses.add("cobra.model.cnw.AggrIf")
    meta.childClasses.add("cobra.model.stp.Entity")
    meta.childClasses.add("cobra.model.top.RtFwinstlsrc")
    meta.childClasses.add("cobra.model.igmpsnoop.Entity")
    meta.childClasses.add("cobra.model.eigrp.Entity")
    meta.childClasses.add("cobra.model.opflex.VtepRefCont")
    meta.childClasses.add("cobra.model.opflexp.PolicyResolveReq")
    meta.childClasses.add("cobra.model.fabric.NodeHealthHist1qtr")
    meta.childClasses.add("cobra.model.fabric.NodeHealth1qtr")
    meta.childClasses.add("cobra.model.satm.Entity")
    meta.childClasses.add("cobra.model.aib.Entity")
    meta.childClasses.add("cobra.model.l3.Ctx")
    meta.childClasses.add("cobra.model.uribv6.Entity")
    meta.childClasses.add("cobra.model.l3vm.Entity")
    meta.childClasses.add("cobra.model.sysdebug.Ep")
    meta.childClasses.add("cobra.model.syslog.Acct")
    meta.childClasses.add("cobra.model.eqptcapacity.Entity")
    meta.childClasses.add("cobra.model.vlanmgr.Entity")
    meta.childClasses.add("cobra.model.fabric.Decommission")
    meta.childClasses.add("cobra.model.topoctrl.Entity")
    meta.childClasses.add("cobra.model.opflexp.Reference")
    meta.childClasses.add("cobra.model.l2.BrIf")
    meta.childClasses.add("cobra.model.fv.EpNs")
    meta.childClasses.add("cobra.model.nw.Vdc")
    meta.childClasses.add("cobra.model.datetime.Ntpq")

    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1year", "HDfabricNodeHealth1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist15min", "HDfabricNodeHealth15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth15min", "CDfabricNodeHealth15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist5min", "HDfabricNodeHealth5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1year", "CDfabricNodeHealth1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1qtr", "HDfabricNodeHealth1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth5min", "CDfabricNodeHealth5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1mo", "HDfabricNodeHealth1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1qtr", "CDfabricNodeHealth1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsMonPolSystemPolCons", "rsmonPolSystemPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1mo", "CDfabricNodeHealth1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1h", "HDfabricNodeHealth1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1d", "HDfabricNodeHealth1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealthHist1w", "HDfabricNodeHealth1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1w", "CDfabricNodeHealth1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1d", "CDfabricNodeHealth1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.NodeHealth1h", "CDfabricNodeHealth1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtTrSrc", "rttraceroutepTrSrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtTrDst", "rttraceroutepTrDst-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtFwinstlsrc", "rtmaintFwinstlsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.CtrlrFwStatusCont", "ctrlrfwstatuscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysdebug.TechSupFileRepository", "techsupportfiles"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.PolicyResolveReq", "policyresolvereq"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.CatFwStatusCont", "catfwstatuscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RtTsSrc", "rtdbgexpTsSrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsSystemRack", "rssystemRack-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.actrlcap.Prov", "actrlcapprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cap.Cat", "capabilities"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.OeHupTrigger", "oehuptrigger"))
    meta.childNamesAndRnPrefix.append(("cobra.model.firmware.FwStatusCont", "fwstatuscont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptcapacity.Entity", "eqptcapacity"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.Decommission", "decommission"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevRefCont", "odevrefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.VtepRefCont", "vteprefcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3cap.Prov", "l3capprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1cap.Prov", "l1capprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsProtGFw", "rsprotGFw-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2cap.Prov", "l2capprov-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.ImplicitStaleEpCont", "impSEpCont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.top.RsNeighFw", "rsneighFw-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.syslog.Acct", "syslogacct"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysdebug.CoreFileRepository", "corefiles"))
    meta.childNamesAndRnPrefix.append(("cobra.model.igmpsnoop.Entity", "igmpsnoop"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mldsnoop.Entity", "mldsnoop"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mock.MockRoot", "mockroot"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevCmdResp", "odcresp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysdebug.Ep", "sysdebug"))
    meta.childNamesAndRnPrefix.append(("cobra.model.topoctrl.Entity", "topoctrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.monitor.Entity", "monitor"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflex.ODevCmdReq", "odcreq-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.System", "procsys"))
    meta.childNamesAndRnPrefix.append(("cobra.model.leqpt.LooseNode", "lsnode-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.If", "tunnel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vlanmgr.Entity", "vlanmgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.action.LCont", "action"))
    meta.childNamesAndRnPrefix.append(("cobra.model.synthetic.SwTLTestObj", "sectl-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cnw.PhysIf", "cphys-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.Entity", "uribv4"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sysmgr.Entity", "sysmgr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.ExtCh", "extch-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.icmpv6.Entity", "icmpv6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ospfv3.Entity", "ospfv3"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.icmpv4.Entity", "icmpv4"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cnw.AggrIf", "caggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv6.Entity", "uribv6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pc.AggrIf", "aggr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.span.RetryCont", "retry"))
    meta.childNamesAndRnPrefix.append(("cobra.model.glean.Entity", "glean"))
    meta.childNamesAndRnPrefix.append(("cobra.model.regress.If", "regr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.ConnGrp", "conng"))
    meta.childNamesAndRnPrefix.append(("cobra.model.actrl.Entity", "actrl"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ethpm.Entity", "ethpm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.PhysIf", "phys-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.Inst", "inst-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.MgmtIf", "mgmt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.Entity", "eigrp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.datetime.Ntpq", "ntpq-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lldp.Entity", "lldp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.span.Acct", "acct"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ospf.Entity", "ospf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ipv6.Entity", "ipv6"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiag.Entity", "diag"))
    meta.childNamesAndRnPrefix.append(("cobra.model.span.Entity", "span"))
    meta.childNamesAndRnPrefix.append(("cobra.model.lacp.Entity", "lacp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.copp.Entity", "copp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.snmp.Entity", "snmp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.Entity", "proc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.InbandIf", "inb-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.Entity", "dhcp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.isis.Entity", "isis"))
    meta.childNamesAndRnPrefix.append(("cobra.model.datetime.ClkPol", "time"))
    meta.childNamesAndRnPrefix.append(("cobra.model.compat.SuppFw", "sfw-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.ExtIf", "ext-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.coop.Entity", "coop"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qosm.Entity", "qosm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ipv4.Entity", "ipv4"))
    meta.childNamesAndRnPrefix.append(("cobra.model.satm.Entity", "satm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3.Ctx", "ctx-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3vm.Entity", "l3vm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpNs", "epns"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.Vdc", "vdc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.Entity", "arp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Entity", "ops"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cdp.Entity", "cdp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vpc.Entity", "vpc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.sts.Entity", "sts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mcp.Entity", "mcp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dpp.Entity", "dpp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bfd.Entity", "bfd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dns.Entity", "dns"))
    meta.childNamesAndRnPrefix.append(("cobra.model.rpm.Entity", "rpm"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.Entity", "bgp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stp.Entity", "stp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aib.Entity", "aib"))
    meta.childNamesAndRnPrefix.append(("cobra.model.opflexp.Reference", "ref"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.BrIf", "br-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.im.Entity", "im"))
    meta.childNamesAndRnPrefix.append(("cobra.model.pc.Entity", "pc"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ac.Entity", "ac"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqpt.Ch", "ch"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.Entity", "nd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fabric.SystemInfo", "si"))

    meta.parentClasses.add("cobra.model.top.Root")
    meta.parentClasses.add("cobra.model.fabric.Node")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('sys', False),
    ]

    prop = PropMeta("str", "address", "address", 15, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("address", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 16803, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("duplicate-ibmgmt-ip", "duplicate-ibmgmt-ip", 1)
    prop._addConstant("duplicate-oobmgmt-ip", "duplicate-oobmgmt-ip", 2)
    prop._addConstant("invalid-ibmgmt-encap", "invalid-ibmgmt-encap", 4)
    prop._addConstant("none", "none", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "currentTime", "currentTime", 19, PropCategory.REGULAR)
    prop.label = "Current Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("currentTime", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fabricId", "fabricId", 24, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("fabricId", prop)

    prop = PropMeta("str", "fabricMAC", "fabricMAC", 25, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 280487012409856
    prop.defaultValueStr = "280487012409856"
    meta.props.add("fabricMAC", prop)

    prop = PropMeta("str", "id", "id", 12, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "inbMgmtAddr", "inbMgmtAddr", 17, PropCategory.REGULAR)
    prop.label = "In-band Management IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtAddr", prop)

    prop = PropMeta("str", "inbMgmtAddr6", "inbMgmtAddr6", 23250, PropCategory.REGULAR)
    prop.label = "In-band Management IPv6 Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("inbMgmtAddr6", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 14, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("cluster", "cluster", 2)
    prop._addConstant("stand-alone", "stand-alone", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13769, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 13, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.regex = ['[a-zA-Z][a-zA-Z0-9-]{0,29}']
    meta.props.add("name", prop)

    prop = PropMeta("str", "oobMgmtAddr", "oobMgmtAddr", 16, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtAddr", prop)

    prop = PropMeta("str", "oobMgmtAddr6", "oobMgmtAddr6", 23249, PropCategory.REGULAR)
    prop.label = "Out-of-band Management IPv6 Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("oobMgmtAddr6", prop)

    prop = PropMeta("str", "podId", "podId", 23, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("podId", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "role", "role", 18, PropCategory.REGULAR)
    prop.label = "Role"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unsupported"
    prop._addConstant("controller", "controller", 1)
    prop._addConstant("leaf", "leaf", 2)
    prop._addConstant("protection-chain", "protection-chain", 6)
    prop._addConstant("spine", "spine", 3)
    prop._addConstant("unsupported", "unknown", 0)
    prop._addConstant("vip", "vip", 5)
    prop._addConstant("vleaf", "vleaf", 4)
    meta.props.add("role", prop)

    prop = PropMeta("str", "serial", "serial", 22, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("serial", prop)

    prop = PropMeta("str", "state", "state", 26, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "out-of-service"
    prop._addConstant("in-service", "in-service", 2)
    prop._addConstant("invalid-ver", "invalid-ver", 1)
    prop._addConstant("out-of-service", "out-of-service", 0)
    meta.props.add("state", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "systemUpTime", "systemUpTime", 21, PropCategory.REGULAR)
    prop.label = "System Up Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("systemUpTime", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AggrIf(Mo):
    """
    The aggregated interface assigned to the node cluster.

    """

    meta = ClassMeta("cobra.model.cnw.AggrIf")

    meta.moClassName = "cnwAggrIf"
    meta.rnFormat = "caggr-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Controller Aggregated Interface"
    meta.writeAccessMask = 0x100000000001
    meta.readAccessMask = 0x4704411022001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.l1.RsCdpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtEncPhysRtdConf")
    meta.childClasses.add("cobra.model.l1.RsL2IfPolCons")
    meta.childClasses.add("cobra.model.l1.RtBrConf")
    meta.childClasses.add("cobra.model.l1.RtSpanSrcToL1IfAtt")
    meta.childClasses.add("cobra.model.cnw.RsActiveIf")
    meta.childClasses.add("cobra.model.l1.RtPhysRtdConf")
    meta.childClasses.add("cobra.model.l1.RsLacpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtEthIf")
    meta.childClasses.add("cobra.model.l1.RtLsNodeToIf")
    meta.childClasses.add("cobra.model.l1.RtToObservedEthIf")
    meta.childClasses.add("cobra.model.l1.RsLldpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsAttEntityPCons")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.l1.RsStpIfPolCons")
    meta.childClasses.add("cobra.model.l1.RtNodePortAtt")
    meta.childClasses.add("cobra.model.l1.RsStormctrlIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsMonPolIfPolCons")
    meta.childClasses.add("cobra.model.cnw.RsMbrIfs")
    meta.childClasses.add("cobra.model.l1.RsHIfPolCons")
    meta.childClasses.add("cobra.model.fv.DomDef")
    meta.childClasses.add("cobra.model.l1.RsQosEgressDppIfPolCons")
    meta.childClasses.add("cobra.model.l1.RsMcpIfPolCons")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")
    meta.childClasses.add("cobra.model.l1.RtExtConf")
    meta.childClasses.add("cobra.model.l1.RsQosIngressDppIfPolCons")

    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosIngressDppIfPolCons", "rsQosIngressDppIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtSpanSrcToL1IfAtt", "rtspanSpanSrcToL1IfAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsQosEgressDppIfPolCons", "rsQosEgressDppIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsStormctrlIfPolCons", "rsstormctrlIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtEncPhysRtdConf", "rtl3EncPhysRtdConf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtToObservedEthIf", "rtToObservedEthIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsAttEntityPCons", "rsattEntityPCons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsMonPolIfPolCons", "rsmonPolIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtNodePortAtt", "rtfvNodePortAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsLacpIfPolCons", "rslacpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsLldpIfPolCons", "rslldpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsCdpIfPolCons", "rscdpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsStpIfPolCons", "rsstpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsMcpIfPolCons", "rsmcpIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsL2IfPolCons", "rsl2IfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtPhysRtdConf", "rtphysRtdConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtLsNodeToIf", "rtLsNodeToIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RsHIfPolCons", "rshIfPolCons"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cnw.RsActiveIf", "rsactiveIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtEthIf", "rtl2EthIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.cnw.RsMbrIfs", "rsmbrIfs-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtExtConf", "rtextConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l1.RtBrConf", "rtbrConf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.DomDef", "dom-"))

    meta.parentClasses.add("cobra.model.top.System")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.l1.EthIf")
    meta.superClasses.add("cobra.model.l1.If")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('caggr-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3711, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 1)
    prop._addConstant("up", "up", 2)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "autoNeg", "autoNeg", 3713, PropCategory.REGULAR)
    prop.label = "Auto Negotiation"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "on"
    prop._addConstant("off", "off", 2)
    prop._addConstant("on", "on", 1)
    meta.props.add("autoNeg", prop)

    prop = PropMeta("str", "bw", "bw", 3722, PropCategory.REGULAR)
    prop.label = "Bandwidth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 100000000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("bw", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "delay", "delay", 3719, PropCategory.REGULAR)
    prop.label = "Delay"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16777215)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("delay", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dot1qEtherType", "dot1qEtherType", 3721, PropCategory.REGULAR)
    prop.label = "Dot1q Ether Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "0x8100"
    prop._addConstant("0x8100", "0x8100", 1)
    prop._addConstant("0x88A8", "0x88a8", 2)
    prop._addConstant("0x9100", "0x9100", 3)
    prop._addConstant("any", "any", 4)
    meta.props.add("dot1qEtherType", prop)

    prop = PropMeta("str", "id", "id", 5903, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "inhBw", "inhBw", 3724, PropCategory.REGULAR)
    prop.label = "Inherit Bandwidth"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 100000000)]
    prop.defaultValue = 4294967295
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 4294967295)
    meta.props.add("inhBw", prop)

    prop = PropMeta("str", "layer", "layer", 3717, PropCategory.REGULAR)
    prop.label = "Layer"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Layer3"
    prop._addConstant("Layer2", "switched", 1)
    prop._addConstant("Layer3", "routed", 2)
    meta.props.add("layer", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "linkDebounce", "linkDebounce", 3720, PropCategory.REGULAR)
    prop.label = "Link Debounce Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 5000)]
    prop.defaultValue = 100
    prop.defaultValueStr = "100"
    meta.props.add("linkDebounce", prop)

    prop = PropMeta("str", "linkLog", "linkLog", 3726, PropCategory.REGULAR)
    prop.label = "Link Logging"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "default"
    prop._addConstant("default", "default", 1)
    prop._addConstant("disable", "disable", 3)
    prop._addConstant("enable", "enable", 2)
    meta.props.add("linkLog", prop)

    prop = PropMeta("str", "mdix", "mdix", 3718, PropCategory.REGULAR)
    prop.label = "MDIX"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 1)
    prop._addConstant("mdi", "mdi", 2)
    prop._addConstant("mdi-x", "mdi-x", 3)
    meta.props.add("mdix", prop)

    prop = PropMeta("str", "medium", "medium", 3723, PropCategory.REGULAR)
    prop.label = "Medium"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "broadcast"
    prop._addConstant("broadcast", "broadcast", 1)
    prop._addConstant("p2p", "p2p", 2)
    meta.props.add("medium", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 3716, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "trunk"
    prop._addConstant("access", "access", 1)
    prop._addConstant("fex-fabric", "fex-fabric", 3)
    prop._addConstant("trunk", "trunk", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13852, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 3714, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(576, 9216)]
    prop.defaultValue = 9000
    prop.defaultValueStr = "9000"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 657, PropCategory.REGULAR)
    prop.label = "Operational Status"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 1)
    prop._addConstant("link-up", "link-up", 3)
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("up", "up", 2)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "pathSDescr", "pathSDescr", 22628, PropCategory.REGULAR)
    prop.label = "Path Selector Description"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("pathSDescr", prop)

    prop = PropMeta("str", "portT", "portT", 3729, PropCategory.REGULAR)
    prop.label = "Port Type"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("eobc", "eobc", 1)
    prop._addConstant("extchfp", "extended-chassis-fabric-port", 6)
    prop._addConstant("extchhp", "extended-chassis-host-port", 5)
    prop._addConstant("fab", "fabric-port", 3)
    prop._addConstant("leaf", "access-port", 4)
    prop._addConstant("mgmt", "management-port", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("portT", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "routerMac", "routerMac", 3728, PropCategory.REGULAR)
    prop.label = "Router MAC"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("not-applicable", "n/a", 0)
    meta.props.add("routerMac", prop)

    prop = PropMeta("str", "snmpTrapSt", "snmpTrapSt", 3715, PropCategory.REGULAR)
    prop.label = "Snmp Trap State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enable"
    prop._addConstant("disable", "disable", 2)
    prop._addConstant("enable", "enable", 1)
    meta.props.add("snmpTrapSt", prop)

    prop = PropMeta("str", "spanMode", "spanMode", 3725, PropCategory.REGULAR)
    prop.label = "Span Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "not-a-span-dest"
    prop._addConstant("not-a-span-dest", "not-a-span-dest", 1)
    prop._addConstant("span-dest", "span-dest", 2)
    prop._addConstant("span-dest-fwd", "span-dest-fwd", 3)
    prop._addConstant("span-dest-fwd-learn", "span-dest-fwd-learn", 4)
    meta.props.add("spanMode", prop)

    prop = PropMeta("str", "speed", "speed", 3712, PropCategory.REGULAR)
    prop.label = "Speed"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 7
    prop.defaultValueStr = "inherit"
    prop._addConstant("100G", "100-gbps", 6)
    prop._addConstant("100M", "100-mbps", 1)
    prop._addConstant("10G", "10-gbps", 3)
    prop._addConstant("1G", "1-gbps", 2)
    prop._addConstant("25G", "25-gbps", 4)
    prop._addConstant("40G", "40-gbps", 5)
    prop._addConstant("inherit", "inherit", 7)
    prop._addConstant("unknown", "unspecified", 0)
    meta.props.add("speed", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "switchingSt", "switchingSt", 3710, PropCategory.REGULAR)
    prop.label = "Switching State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("switchingSt", prop)

    prop = PropMeta("str", "trunkLog", "trunkLog", 3727, PropCategory.REGULAR)
    prop.label = "Trunk Logging"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "default"
    prop._addConstant("default", "default", 1)
    prop._addConstant("disable", "disable", 3)
    prop._addConstant("enable", "enable", 2)
    meta.props.add("trunkLog", prop)

    prop = PropMeta("str", "usage", "usage", 3730, PropCategory.REGULAR)
    prop.label = "Port Usage"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "discovery"
    prop._addConstant("blacklist", "black-listed", 32)
    prop._addConstant("controller", "controller", 16)
    prop._addConstant("discovery", "discovery", 1)
    prop._addConstant("epg", "epg", 2)
    prop._addConstant("fabric", "fabric", 4)
    prop._addConstant("infra", "infra", 8)
    prop._addConstant("out-of-service", "out-of-service", 128)
    prop._addConstant("span", "span", 64)
    meta.props.add("usage", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("l1EthIfToEPg", "EPG", "cobra.model.fv.EPg"))

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

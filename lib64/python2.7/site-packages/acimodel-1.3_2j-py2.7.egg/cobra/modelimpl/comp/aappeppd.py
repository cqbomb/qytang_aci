# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AAppEpPD(Mo):
    meta = ClassMeta("cobra.model.comp.AAppEpPD")

    meta.isAbstract = True
    meta.moClassName = "compAAppEpPD"


    meta.moClassName = "compAAppEpPD"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "None"
    meta.writeAccessMask = 0x405
    meta.readAccessMask = 0x405
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.comp.RsCtrlrP")
    meta.childClasses.add("cobra.model.comp.RsLocalEpCP")

    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsLocalEpCP", "rslocalEpCP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.comp.RsCtrlrP", "rsctrlrP-"))

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.comp.Entity")
    meta.superClasses.add("cobra.model.naming.NamedIdentifiedObject")
    meta.superClasses.add("cobra.model.comp.AEpPD")

    meta.concreteSubClasses.add("cobra.model.vmm.EpPD")
    meta.concreteSubClasses.add("cobra.model.comp.EpPD")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "allocMode", "allocMode", 20854, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "dynamic"
    prop._addConstant("dynamic", "dynamic-allocation", 0)
    prop._addConstant("static", "static-allocation", 1)
    meta.props.add("allocMode", prop)

    prop = PropMeta("str", "bdDn", "bdDn", 25844, PropCategory.REGULAR)
    prop.label = "BD DN"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bdDn", prop)

    prop = PropMeta("str", "blockAllPorts", "blockAllPorts", 18630, PropCategory.REGULAR)
    prop.label = "Block All Ports Setting"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("blockAllPorts", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "classPref", "classPref", 23402, PropCategory.REGULAR)
    prop.label = "Classification Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "encap"
    prop._addConstant("encap", "packet-encapsulation", 0)
    prop._addConstant("useg", "useg", 1)
    meta.props.add("classPref", prop)

    prop = PropMeta("str", "configFlags", "configFlags", 20925, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("none", "none", 0)
    prop._addConstant("skip-encap-validation", "skip-validation-of-encapsulation-value", 1)
    meta.props.add("configFlags", prop)

    prop = PropMeta("str", "crtrnEnabled", "crtrnEnabled", 18594, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("crtrnEnabled", prop)

    prop = PropMeta("str", "deployIssues", "deployIssues", 979, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("attr-dom-not-supported", "attribute-based-epg-is-not-supported-for-the-domain-type", 131072)
    prop._addConstant("ctrlr-not-deployable", "controller-not-deployable.", 32768)
    prop._addConstant("ctrlr-unsupported", "unsupported-controller.", 16384)
    prop._addConstant("duplicate-static-encap", "duplicate-epg-encapsulation-value", 2097152)
    prop._addConstant("dvs-config-failed", "failed-to-configure-dvs.", 4096)
    prop._addConstant("dvs-error", "failed-to-get-dvs-config.", 2)
    prop._addConstant("dvs-prep-error", "dvs-preparation-error-for-vxlan.", 32)
    prop._addConstant("dvs-version-error", "could-not-get-dvs-version.", 512)
    prop._addConstant("epg-pol-enforce-missing-pri_encap", "missing-primary-encap-in-vmm-domain-relation-for-policy-enforced-epg", 8388608)
    prop._addConstant("epg-pol-enforce-unsupported", "intra-epg-isolation-is-not-supported-in-avs-vlan-mode,-dvs-vxlan-mode-or-for-microsoft-domains", 16777216)
    prop._addConstant("epg-useg-unsupported", "microsegmentation-is-not-supported-for-the-controller", 67108864)
    prop._addConstant("epp-mcast-addr-match-fabric", "epg-mcast-address-is-the-same-as-fabric-mcast-address.-domain-fabric-multicast-address-overlaps-multicast-address-pool.", 1048576)
    prop._addConstant("invalid-encap", "no-valid-encapsulation-identifier-allocated-for-the-epg", 1)
    prop._addConstant("invalid-mcast-addr", "no-valid-mcast-address-allocated-for-the-epg", 65536)
    prop._addConstant("invalid-static-encap", "epg-encapsulation-value-is-not-part-of-any-static-encapsulation-block-for-the-vmm-domain", 524288)
    prop._addConstant("invalid-usegepg-configuration", "invalid-useg-epg-configuration.-a-non-useg-epg-exists-under-the-same-tenant", 4194304)
    prop._addConstant("invalid-usegepg-encap", "primary-encap-property-and-encap-property-both-need-to-be-set", 33554432)
    prop._addConstant("invalid-vip", "vip-has-not-been-allocated", 262144)
    prop._addConstant("lacp-apply-failed", "lacp-update-for-portgroup-failed.", 2048)
    prop._addConstant("no-ctrlr-dn", "controller-dn-missing.", 256)
    prop._addConstant("no-ctrlr-map", "controller-missing-from-internal-map.", 128)
    prop._addConstant("none", "n/a", 0)
    prop._addConstant("pg-api-error", "portgroup-property-get-api-failed.", 1024)
    prop._addConstant("policy-not-found", "failed-to-find-policy-container-for-controller.", 8192)
    prop._addConstant("prep-vxlan-error", "vxlan-cluster-preparation-error.", 8)
    prop._addConstant("proc-vmm-error", "cluster-type-object-missing-from-controller.", 16)
    prop._addConstant("unsupported-ctrlr", "invalid-controller-scope.", 64)
    prop._addConstant("vdn-error", "network-scope-creation-error.", 4)
    meta.props.add("deployIssues", prop)

    prop = PropMeta("str", "descr", "descr", 5587, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 983, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "encapAllocKey", "encapAllocKey", 23403, PropCategory.REGULAR)
    prop.label = "Encapsulation allocation Key"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encapAllocKey", prop)

    prop = PropMeta("str", "encapCtx", "encapCtx", 18204, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("encapCtx", prop)

    prop = PropMeta("str", "encapMode", "encapMode", 23406, PropCategory.REGULAR)
    prop.label = "Encapsulation mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "access"
    prop._addConstant("access", "access-mode", 0)
    prop._addConstant("private", "private-mode", 2)
    prop._addConstant("trunk", "trunk-mode", 1)
    meta.props.add("encapMode", prop)

    prop = PropMeta("str", "epgPKey", "epgPKey", 980, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epgPKey", prop)

    prop = PropMeta("str", "eppDn", "eppDn", 981, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("eppDn", prop)

    prop = PropMeta("str", "faultDKey", "faultDKey", 15775, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("faultDKey", prop)

    prop = PropMeta("str", "forgedTransmit", "forgedTransmit", 991, PropCategory.REGULAR)
    prop.label = "Forged Transmit Setting"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("forgedTransmit", prop)

    prop = PropMeta("str", "id", "id", 1003, PropCategory.REGULAR)
    prop.label = "Id"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "idConsumerDn", "idConsumerDn", 23404, PropCategory.REGULAR)
    prop.label = "Ident Consumer DN"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("idConsumerDn", prop)

    prop = PropMeta("str", "lbAlgo", "lbAlgo", 985, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "mac-pin"
    prop._addConstant("ip-hash", "ip-hash", 1)
    prop._addConstant("mac-pin", "mac-pin", 2)
    prop._addConstant("mac-pin-nicload", "mac-pin-nicload", 3)
    meta.props.add("lbAlgo", prop)

    prop = PropMeta("str", "macChange", "macChange", 990, PropCategory.REGULAR)
    prop.label = "MAC Address Changes Setting"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("macChange", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 984, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 988, PropCategory.REGULAR)
    prop.label = "Monitoring Policy Dn"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 1004, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "pcEnfPref", "pcEnfPref", 23405, PropCategory.REGULAR)
    prop.label = "Policy Control Enforcement"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "unenforced"
    prop._addConstant("enforced", "enforced", 1)
    prop._addConstant("unenforced", "unenforced", 2)
    meta.props.add("pcEnfPref", prop)

    prop = PropMeta("str", "primaryEncap", "primaryEncap", 23407, PropCategory.REGULAR)
    prop.label = "Primary encapsulation when EPG is isolated"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("primaryEncap", prop)

    prop = PropMeta("str", "promMode", "promMode", 989, PropCategory.REGULAR)
    prop.label = "Promiscous Mode Setting"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "Disabled"
    prop._addConstant("Disabled", "disabled", 1)
    prop._addConstant("Enabled", "enabled", 2)
    meta.props.add("promMode", prop)

    prop = PropMeta("str", "resImedcy", "resImedcy", 982, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    prop._addConstant("pre-provision", "pre-provision", 3)
    meta.props.add("resImedcy", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "statsCollectionState", "statsCollectionState", 987, PropCategory.REGULAR)
    prop.label = "Indicates whether Statistics should be Collected for this Object"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("statsCollectionState", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "txId", "txId", 26232, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("txId", prop)

    prop = PropMeta("str", "type", "type", 986, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "Tenant"
    prop._addConstant("Mgmt", "mgmt", 1)
    prop._addConstant("Services", "services", 3)
    prop._addConstant("Tenant", "tenant", 2)
    meta.props.add("type", prop)

    prop = PropMeta("str", "updateTs", "updateTs", 18595, PropCategory.REGULAR)
    prop.label = "Update Timestamp"
    prop.isOper = True
    meta.props.add("updateTs", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

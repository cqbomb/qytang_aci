# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class NwIssues(Mo):
    """
    The network configuration issues for each endpoint profile.

    """

    meta = ClassMeta("cobra.model.fv.NwIssues")

    meta.moClassName = "fvNwIssues"
    meta.rnFormat = "nwissues"
    meta.category = MoCategory.REGULAR
    meta.label = "Network Configuration Issues"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.RsStPathAtt")
    meta.parentClasses.add("cobra.model.fv.AEPgCont")
    meta.parentClasses.add("cobra.model.fv.ExtStPathAtt")
    meta.parentClasses.add("cobra.model.fv.RsStGrpAtt")
    meta.parentClasses.add("cobra.model.fv.RsNodePortAtt")
    meta.parentClasses.add("cobra.model.fv.InBEpP")
    meta.parentClasses.add("cobra.model.vz.ToEPgAny")
    meta.parentClasses.add("cobra.model.vz.ToEPg")
    meta.parentClasses.add("cobra.model.fv.RtdEpP")
    meta.parentClasses.add("cobra.model.fv.Locale")
    meta.parentClasses.add("cobra.model.fv.AttEntityPathAtt")
    meta.parentClasses.add("cobra.model.fv.StPathAtt")
    meta.parentClasses.add("cobra.model.fv.DyPathAtt")
    meta.parentClasses.add("cobra.model.fv.ConfigState")
    meta.parentClasses.add("cobra.model.fv.EpP")
    meta.parentClasses.add("cobra.model.fv.OoBEpP")
    meta.parentClasses.add("cobra.model.fv.BrEpP")

    meta.superClasses.add("cobra.model.fv.AEpPConfIssues")
    meta.superClasses.add("cobra.model.pol.AConfIssues")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.fv.AConfIssues")

    meta.rnPrefixes = [
        ('nwissues', False),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configQual", "configQual", 1832, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("IP-EPG-not-applicable-to-L2-only-BD", "ip-based-epg-not-applicable-to-l2-only-bd.", 70368744177664)
    prop._addConstant("Qos-Policy-not-supported-for-IP-EPG", "qos-policy-not-supported-for-ip-based-epg.", 140737488355328)
    prop._addConstant("bd-not-present", "bd-not-present", 1)
    prop._addConstant("bgp-peer-profile-conflict", "same-bgp-peer-profile-for-context(vrf)-is-deployed-on-the-node-from-different-l3-outsides", 68719476736)
    prop._addConstant("context-not-present", "vrf-not-present", 2)
    prop._addConstant("dampening-policy-conflict", "different-dampening-policies-are-defined-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides.", 2251799813685248)
    prop._addConstant("def-rtleak-criteria-conflict", "different-default-route-leak-criterias-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides", 17592186044416)
    prop._addConstant("default-rt-leak-scope-conflict", "l3-outsides-have-different-scopes-for-default-route-leak-policies-on-the-same-node", 1099511627776)
    prop._addConstant("dest-is-member-of-pc-or-vpc", "span-destination-cannot-be-pc-or-vpc-member", 4294967296)
    prop._addConstant("dhcp-provider-is-not-reachable", "dhcp-provider-not-reachable", 134217728)
    prop._addConstant("dns-not-supported-on-spine-inb", "inband-dns-resolution-not-supported-on-spines.", 35184372088832)
    prop._addConstant("duplicate-encap", "encap-is-already-in-use.", 34359738368)
    prop._addConstant("eigrp-multiple-out-conflict", "eigrp-cannot-be-deployed-on-the-same-node-and-same-context-from-multiple-l3-outsides", 8796093022208)
    prop._addConstant("encap-already-in-use", "encap-already-used-in-another-epg", 4194304)
    prop._addConstant("encap-mode-mismatch", "different-encap-modes-are-not-allowed-for-an-encap-on-a-given-interface.", 4503599627370496)
    prop._addConstant("filter-entry-protocol-not-supported", "filter-entry-unsupported-protocol-value", 8589934592)
    prop._addConstant("inconsistent-ibgp-peer-as-number", "inconsistent-ibgp-peer-as-number-provided", 262144)
    prop._addConstant("insufficient-resources", "insufficient-resources", 4)
    prop._addConstant("interleak-policy-conflict", "different-interleak-policies-are-defined-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides.", 562949953421312)
    prop._addConstant("invalid-bgp-peer-address", "bgp-peer-address-cannot-be-same-as-router-id", 524288)
    prop._addConstant("invalid-ep-selection", "spine-cannot-be-selected-for-this-ep", 536870912)
    prop._addConstant("invalid-exception-mask-for-subnet", "exception-subnet-mask-must-be-more-specific-than-subnet-mask", 1048576)
    prop._addConstant("invalid-path", "invalid-path-configuration", 64)
    prop._addConstant("invalid-vlan", "invalid-vlan-configuration", 33554432)
    prop._addConstant("ip-address-already-in-use", "ip-address-already-in-use", 268435456)
    prop._addConstant("ip-address-not-present", "ip-address-not-present", 32768)
    prop._addConstant("l3out-config-conflict", "operational-interface-parameters-cannot-be-different-(e.g.-mtu)-from-different-deployments-under-a-context", 4398046511104)
    prop._addConstant("l3port-and-sub-interface-on-path", "l3-port-and-sub-interface-not-allowed-on-same-path", 2147483648)
    prop._addConstant("missing-dhcp-lbl-for-infra", "infra-dhcp-relay-profile-is-missing-corresponding-dhcp-label", 131072)
    prop._addConstant("multiple-ctx-configuration", "multiple-vrf-configuration-provided-for-an-encap-or-path", 65536)
    prop._addConstant("multiple-dom-vnid-conflict", "multiple-domains-vnid-conflict", 2199023255552)
    prop._addConstant("multiple-external-encap", "only-one-external-encap-allowed-on-bridge-domain", 16384)
    prop._addConstant("multiple-mgmt-epg", "multiple-management-epgs-configured-for-node", 67108864)
    prop._addConstant("multiple-outsides-from-context-configured-for-the-same-node", "multiple-external-networks-from-same-context-configured-for-same-node---deprecated", 8388608)
    prop._addConstant("native-or-untagged-encap-failure", "only-one-native-or-untagged-encap-allowed-on-interface", 8192)
    prop._addConstant("not-applicable", "n/a", 0)
    prop._addConstant("not-supported-with-egress-policy-enforcement-mode", "not-supported-with-vrfs-egress-policy-enforcement-mode", 281474976710656)
    prop._addConstant("ospf-area-id-conflict", "same-ospf-area-for-context(vrf)-deployed-on-the-node-from-different-outsides", 274877906944)
    prop._addConstant("ospf-role-conflict", "ospf-have-different-roles-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides", 549755813888)
    prop._addConstant("path-is-out-of-service", "path-out-of-service", 16777216)
    prop._addConstant("path-wiring-issues", "path-wiring-issues", 1073741824)
    prop._addConstant("port-channel-capacity", "insufficient-port-channels-available", 4096)
    prop._addConstant("port-configured-as-l2", "interface-configured-as-l2", 512)
    prop._addConstant("port-configured-as-l3", "interface-configured-as-l3", 256)
    prop._addConstant("port-configured-for-apic", "port-connected-to-controller", 2048)
    prop._addConstant("port-configured-for-fex", "interface-configured-for-fex", 1024)
    prop._addConstant("port-part-of-port-channel", "port-is-member-of-port-channel", 128)
    prop._addConstant("prefix-entry-already-in-use", "prefix-entry-already-used-in-another-epg", 2097152)
    prop._addConstant("router-id-conflict", "different-router-ids-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides", 137438953472)
    prop._addConstant("rtctrl-enforce-policy-conflict", "different-route-control-enforcement-policies-are-defined-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides.", 1125899906842624)
    prop._addConstant("rule-id-allocation-failed", "rule-id-cannot-be-allocated", 17179869184)
    prop._addConstant("vlan-capacity", "insufficient-vlans-available", 8)
    prop._addConstant("vrf-capacity", "insufficient-vrfs-available", 32)
    prop._addConstant("vxlan-capacity", "insufficient-vxlans-available", 16)
    meta.props.add("configQual", prop)

    prop = PropMeta("str", "configSt", "configSt", 4993, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applied"
    prop._addConstant("applied", "applied", 2)
    prop._addConstant("applying", "applying", 1)
    prop._addConstant("failed-to-apply", "failed-to-apply", 3)
    prop._addConstant("not-applied", "not-applied", 0)
    prop._addConstant("temp-failed-to-apply", "temp-failed-to-apply", 4)
    meta.props.add("configSt", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "epgPKey", "epgPKey", 1831, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epgPKey", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14318, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tempConfigQual", "tempConfigQual", 16107, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applicable"
    prop._addConstant("IP-EPG-not-applicable-to-L2-only-BD", "ip-based-epg-not-applicable-to-l2-only-bd.", 70368744177664)
    prop._addConstant("Qos-Policy-not-supported-for-IP-EPG", "qos-policy-not-supported-for-ip-based-epg.", 140737488355328)
    prop._addConstant("bd-not-present", "bd-not-present", 1)
    prop._addConstant("bgp-peer-profile-conflict", "same-bgp-peer-profile-for-context(vrf)-is-deployed-on-the-node-from-different-l3-outsides", 68719476736)
    prop._addConstant("context-not-present", "vrf-not-present", 2)
    prop._addConstant("dampening-policy-conflict", "different-dampening-policies-are-defined-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides.", 2251799813685248)
    prop._addConstant("def-rtleak-criteria-conflict", "different-default-route-leak-criterias-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides", 17592186044416)
    prop._addConstant("default-rt-leak-scope-conflict", "l3-outsides-have-different-scopes-for-default-route-leak-policies-on-the-same-node", 1099511627776)
    prop._addConstant("dest-is-member-of-pc-or-vpc", "span-destination-cannot-be-pc-or-vpc-member", 4294967296)
    prop._addConstant("dhcp-provider-is-not-reachable", "dhcp-provider-not-reachable", 134217728)
    prop._addConstant("dns-not-supported-on-spine-inb", "inband-dns-resolution-not-supported-on-spines.", 35184372088832)
    prop._addConstant("duplicate-encap", "encap-is-already-in-use.", 34359738368)
    prop._addConstant("eigrp-multiple-out-conflict", "eigrp-cannot-be-deployed-on-the-same-node-and-same-context-from-multiple-l3-outsides", 8796093022208)
    prop._addConstant("encap-already-in-use", "encap-already-used-in-another-epg", 4194304)
    prop._addConstant("encap-mode-mismatch", "different-encap-modes-are-not-allowed-for-an-encap-on-a-given-interface.", 4503599627370496)
    prop._addConstant("filter-entry-protocol-not-supported", "filter-entry-unsupported-protocol-value", 8589934592)
    prop._addConstant("inconsistent-ibgp-peer-as-number", "inconsistent-ibgp-peer-as-number-provided", 262144)
    prop._addConstant("insufficient-resources", "insufficient-resources", 4)
    prop._addConstant("interleak-policy-conflict", "different-interleak-policies-are-defined-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides.", 562949953421312)
    prop._addConstant("invalid-bgp-peer-address", "bgp-peer-address-cannot-be-same-as-router-id", 524288)
    prop._addConstant("invalid-ep-selection", "spine-cannot-be-selected-for-this-ep", 536870912)
    prop._addConstant("invalid-exception-mask-for-subnet", "exception-subnet-mask-must-be-more-specific-than-subnet-mask", 1048576)
    prop._addConstant("invalid-path", "invalid-path-configuration", 64)
    prop._addConstant("invalid-vlan", "invalid-vlan-configuration", 33554432)
    prop._addConstant("ip-address-already-in-use", "ip-address-already-in-use", 268435456)
    prop._addConstant("ip-address-not-present", "ip-address-not-present", 32768)
    prop._addConstant("l3out-config-conflict", "operational-interface-parameters-cannot-be-different-(e.g.-mtu)-from-different-deployments-under-a-context", 4398046511104)
    prop._addConstant("l3port-and-sub-interface-on-path", "l3-port-and-sub-interface-not-allowed-on-same-path", 2147483648)
    prop._addConstant("missing-dhcp-lbl-for-infra", "infra-dhcp-relay-profile-is-missing-corresponding-dhcp-label", 131072)
    prop._addConstant("multiple-ctx-configuration", "multiple-vrf-configuration-provided-for-an-encap-or-path", 65536)
    prop._addConstant("multiple-dom-vnid-conflict", "multiple-domains-vnid-conflict", 2199023255552)
    prop._addConstant("multiple-external-encap", "only-one-external-encap-allowed-on-bridge-domain", 16384)
    prop._addConstant("multiple-mgmt-epg", "multiple-management-epgs-configured-for-node", 67108864)
    prop._addConstant("multiple-outsides-from-context-configured-for-the-same-node", "multiple-external-networks-from-same-context-configured-for-same-node---deprecated", 8388608)
    prop._addConstant("native-or-untagged-encap-failure", "only-one-native-or-untagged-encap-allowed-on-interface", 8192)
    prop._addConstant("not-applicable", "n/a", 0)
    prop._addConstant("not-supported-with-egress-policy-enforcement-mode", "not-supported-with-vrfs-egress-policy-enforcement-mode", 281474976710656)
    prop._addConstant("ospf-area-id-conflict", "same-ospf-area-for-context(vrf)-deployed-on-the-node-from-different-outsides", 274877906944)
    prop._addConstant("ospf-role-conflict", "ospf-have-different-roles-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides", 549755813888)
    prop._addConstant("path-is-out-of-service", "path-out-of-service", 16777216)
    prop._addConstant("path-wiring-issues", "path-wiring-issues", 1073741824)
    prop._addConstant("port-channel-capacity", "insufficient-port-channels-available", 4096)
    prop._addConstant("port-configured-as-l2", "interface-configured-as-l2", 512)
    prop._addConstant("port-configured-as-l3", "interface-configured-as-l3", 256)
    prop._addConstant("port-configured-for-apic", "port-connected-to-controller", 2048)
    prop._addConstant("port-configured-for-fex", "interface-configured-for-fex", 1024)
    prop._addConstant("port-part-of-port-channel", "port-is-member-of-port-channel", 128)
    prop._addConstant("prefix-entry-already-in-use", "prefix-entry-already-used-in-another-epg", 2097152)
    prop._addConstant("router-id-conflict", "different-router-ids-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides", 137438953472)
    prop._addConstant("rtctrl-enforce-policy-conflict", "different-route-control-enforcement-policies-are-defined-for-context(vrf)-deployed-on-the-node-from-different-l3-outsides.", 1125899906842624)
    prop._addConstant("rule-id-allocation-failed", "rule-id-cannot-be-allocated", 17179869184)
    prop._addConstant("vlan-capacity", "insufficient-vlans-available", 8)
    prop._addConstant("vrf-capacity", "insufficient-vrfs-available", 32)
    prop._addConstant("vxlan-capacity", "insufficient-vxlans-available", 16)
    meta.props.add("tempConfigQual", prop)

    prop = PropMeta("str", "temporaryError", "temporaryError", 16106, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("temporaryError", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

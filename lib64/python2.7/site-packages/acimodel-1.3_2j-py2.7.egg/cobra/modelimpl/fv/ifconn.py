# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class IfConn(Mo):
    """
    Connectivity parameters for an interface.

    """

    meta = ClassMeta("cobra.model.fv.IfConn")

    meta.moClassName = "fvIfConn"
    meta.rnFormat = "conn-[%(encap)s]-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Interface Connectivity"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x600421002081
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.qos.IngressDppPolHolder")
    meta.childClasses.add("cobra.model.l3ext.IpDef")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fv.RtL3If")
    meta.childClasses.add("cobra.model.fv.RtRouteToIfConn")
    meta.childClasses.add("cobra.model.fv.RtIpAddr")
    meta.childClasses.add("cobra.model.fv.PrimaryEncapDef")
    meta.childClasses.add("cobra.model.mgmt.IpDef")
    meta.childClasses.add("cobra.model.nd.IfPolDef")
    meta.childClasses.add("cobra.model.eigrp.IfDef")
    meta.childClasses.add("cobra.model.bfd.IfDef")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fv.RtExtBD")
    meta.childClasses.add("cobra.model.fv.TunDefRef")
    meta.childClasses.add("cobra.model.fv.RsToDomDef")
    meta.childClasses.add("cobra.model.qos.EgressDppPolHolder")
    meta.childClasses.add("cobra.model.fv.EpDefRef")
    meta.childClasses.add("cobra.model.bgp.PeerDef")
    meta.childClasses.add("cobra.model.fv.RsDomIfConn")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.ospf.IfDef")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtRouteToIfConn", "rtipRouteToIfConn-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.IngressDppPolHolder", "iqosdpppolh"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsToDomDef", "rstoDomDef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.qos.EgressDppPolHolder", "eqosdpppolh"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RsDomIfConn", "rsdomIfConn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.PrimaryEncapDef", "primencap-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.TunDefRef", "tundefref-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.EpDefRef", "epdefref-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtIpAddr", "rtipAddr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.nd.IfPolDef", "ndifpold"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eigrp.IfDef", "eigrpIfP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bfd.IfDef", "bfdIfDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.IpDef", "mipdef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtExtBD", "rtextBD"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ospf.IfDef", "ospfIfP"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtL3If", "rtl3If"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerDef", "peerP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l3ext.IpDef", "addr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.fv.ConnDef")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")

    meta.rnPrefixes = [
        ('conn-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "addr", "addr", 1745, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "auto", "auto", 1747, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("auto", prop)

    prop = PropMeta("str", "bcastP", "bcastP", 1743, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("bcastP", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "classPref", "classPref", 23431, PropCategory.REGULAR)
    prop.label = "Classification Preference"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "encap"
    prop._addConstant("encap", "packet-encapsulation", 0)
    prop._addConstant("useg", "useg", 1)
    meta.props.add("classPref", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 1741, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "extEncap", "extEncap", 1742, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("extEncap", prop)

    prop = PropMeta("str", "gw", "gw", 1746, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("gw", prop)

    prop = PropMeta("str", "ifInstT", "ifInstT", 16252, PropCategory.REGULAR)
    prop.label = "Interface Instantiation Directive"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 12
    prop.defaultValueStr = "l3-port"
    prop._addConstant("bridged", "pure-l2-ports", 2)
    prop._addConstant("ext-svi", "external-svi", 13)
    prop._addConstant("l3-port", "routed-interface", 12)
    prop._addConstant("sub-interface", "routed-sub-interface", 11)
    meta.props.add("ifInstT", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "llAddr", "llAddr", 16877, PropCategory.REGULAR)
    prop.label = "IPv6 Link Local Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("llAddr", prop)

    prop = PropMeta("str", "mac", "mac", 1744, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mac", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 1750, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 1748, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "regular"
    prop._addConstant("native", "access-(802.1p)", 1)
    prop._addConstant("regular", "trunk", 0)
    prop._addConstant("untagged", "access-(untagged)", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14274, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 1749, PropCategory.REGULAR)
    prop.label = "MTU Size"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(576, 9000)]
    prop.defaultValue = 1
    prop.defaultValueStr = "inherit"
    prop._addConstant("inherit", "inherit", 1)
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "resImedcy", "resImedcy", 1751, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "lazy"
    prop._addConstant("immediate", "immediate", 1)
    prop._addConstant("lazy", "on-demand", 2)
    prop._addConstant("pre-provision", "pre-provision", 3)
    meta.props.add("resImedcy", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "validState", "validState", 15733, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-validated"
    prop._addConstant("invalid", "invalid", 2)
    prop._addConstant("not-validated", "not-validated", 0)
    prop._addConstant("valid", "valid", 1)
    meta.props.add("validState", prop)

    meta.namingProps.append(getattr(meta.props, "encap"))
    getattr(meta.props, "encap").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    def __init__(self, parentMoOrDn, encap, addr, markDirty=True, **creationProps):
        namingVals = [encap, addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

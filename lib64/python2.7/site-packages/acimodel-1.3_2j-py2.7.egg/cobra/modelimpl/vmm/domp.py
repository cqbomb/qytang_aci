# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class DomP(Mo):
    """
    The VMM domain profile is a policy for grouping VM controllers with similar networking policy requirements. For example, the VM controllers can share VLAN or VXLAN space and application endpoint groups. The APIC communicates with the controller to publish network configurations such as port groups that are then applied to the virtual workloads.

    """

    meta = ClassMeta("cobra.model.vmm.DomP")

    meta.moClassName = "vmmDomP"
    meta.rnFormat = "dom-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VMM Domain"
    meta.writeAccessMask = 0x11
    meta.readAccessMask = 0x404534100002061f
    meta.isDomainable = True
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.infra.RsVlanNs")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.vmm.RtDompRel")
    meta.childClasses.add("cobra.model.vmm.RsDomMcastAddrNs")
    meta.childClasses.add("cobra.model.vmm.RtALDevToDomP")
    meta.childClasses.add("cobra.model.vmm.RtBaseDomP")
    meta.childClasses.add("cobra.model.vmm.RsDefaultCdpIfPol")
    meta.childClasses.add("cobra.model.vmm.EpPD")
    meta.childClasses.add("cobra.model.fvns.VlanInstDef")
    meta.childClasses.add("cobra.model.vmm.UsrAccP")
    meta.childClasses.add("cobra.model.vmm.RsDefaultLacpLagPol")
    meta.childClasses.add("cobra.model.infra.RsVlanNsDef")
    meta.childClasses.add("cobra.model.vmm.RtDomP")
    meta.childClasses.add("cobra.model.infra.RtDomP")
    meta.childClasses.add("cobra.model.infra.RsVipAddrNs")
    meta.childClasses.add("cobra.model.vmm.EncapAllctr")
    meta.childClasses.add("cobra.model.infra.RtDomAtt")
    meta.childClasses.add("cobra.model.vmm.RsDefaultLldpIfPol")
    meta.childClasses.add("cobra.model.vmm.RsDefaultL2InstPol")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.vmm.RsDefaultStpIfPol")
    meta.childClasses.add("cobra.model.infra.RsDomVxlanNsDef")
    meta.childClasses.add("cobra.model.vmm.CtrlrP")
    meta.childClasses.add("cobra.model.vmm.RsDefaultFwPol")
    meta.childClasses.add("cobra.model.vmm.OrchsProv")
    meta.childClasses.add("cobra.model.aaa.DomainRef")
    meta.childClasses.add("cobra.model.infra.RtLDevDomP")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.vmm.VSwitchPolicyCont")
    meta.childClasses.add("cobra.model.vmm.AttEntityPCont")

    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultLacpLagPol", "rsdefaultLacpLagPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultLldpIfPol", "rsdefaultLldpIfPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultL2InstPol", "rsdefaultL2InstPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtALDevToDomP", "rtvnsALDevToDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultCdpIfPol", "rsdefaultCdpIfPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultStpIfPol", "rsdefaultStpIfPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDomMcastAddrNs", "rsdomMcastAddrNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsDomVxlanNsDef", "rsdomVxlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RsDefaultFwPol", "rsdefaultFwPol"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtLDevDomP", "rtvnsLDevDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.VSwitchPolicyCont", "vswitchpolcont"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtDompRel", "rtpolDompRel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.AttEntityPCont", "attentpcont-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtBaseDomP", "rtbaseDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVlanNsDef", "rsvlanNsDef"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.RtDomP", "rtcompDomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVipAddrNs", "rsvipAddrNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomAtt", "rtfvDomAtt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fvns.VlanInstDef", "vlannsdef-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RsVlanNs", "rsvlanNs"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.UsrAccP", "usracc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.infra.RtDomP", "rtdomP-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.EncapAllctr", "allctr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.DomainRef", "domain-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.CtrlrP", "ctrlr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.OrchsProv", "orchs-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.vmm.EpPD", "eppd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.vmm.ProvP")

    meta.superClasses.add("cobra.model.infra.ADomP")
    meta.superClasses.add("cobra.model.infra.DomP")
    meta.superClasses.add("cobra.model.comp.DomP")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Dom")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.fv.ADomP")
    meta.superClasses.add("cobra.model.pol.Cont")

    meta.rnPrefixes = [
        ('dom-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 4941, PropCategory.REGULAR)
    prop.label = "Configuration Issues"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("cdp-lldp-collision", "both-cdp-policy-and-lldp-policy-are-configured-for-attach-entity-profile", 16)
    prop._addConstant("invalid-mcast-addr", "missing-multicast-address-for-vxlan-mode", 512)
    prop._addConstant("invalid-port", "invalid-port-for-fabric-interface", 513)
    prop._addConstant("invalid-vxlan-ns-range", "vxlan-range-below-0x800000-is-not-valid-for-n1kv-ns-mode", 128)
    prop._addConstant("missing-assoc-attEntP", "domain-is-missing-association-from-attach-entity-profile", 8)
    prop._addConstant("missing-encap", "invalid-or-missing-encapsulation", 1)
    prop._addConstant("missing-encapblk", "invalid-or-missing-encapsulation-blocks", 4)
    prop._addConstant("missing-epg", "association-to-end-point-group-not-specified", 2)
    prop._addConstant("missing-ns-assoc", "invalid-or-missing-association-to-vlan-or-vxlan-namespace", 256)
    prop._addConstant("multiple-cdp", "more-than-one-cdp-policy-found-for-attach-entity-profile", 64)
    prop._addConstant("multiple-lldp", "more-than-one-lldp-policy-found-for-attach-entity-profile", 32)
    prop._addConstant("none", "n/a", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encapMode", "encapMode", 20970, PropCategory.REGULAR)
    prop.label = "Encap Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("unknown", "unknown", 0)
    prop._addConstant("vlan", "vlan-mode", 1)
    prop._addConstant("vxlan", "vxlan-mode", 2)
    meta.props.add("encapMode", prop)

    prop = PropMeta("str", "enfPref", "enfPref", 1862, PropCategory.REGULAR)
    prop.label = "Switching Preference"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "hw"
    prop._addConstant("hw", "hardware", 2)
    prop._addConstant("sw", "software", 1)
    prop._addConstant("unknown", "unknwon", 3)
    meta.props.add("enfPref", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mcastAddr", "mcastAddr", 1863, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("mcastAddr", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 1861, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "default"
    prop._addConstant("default", "distributed-switch", 0)
    prop._addConstant("n1kv", "cisco-avs", 1)
    prop._addConstant("ovs", "open-vswitch", 3)
    prop._addConstant("unknown", "unknown", 2)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14322, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 7294, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15232, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15233, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "txId", "txId", 26241, PropCategory.REGULAR)
    prop.label = "Transaction Id when DomP was created"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("txId", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

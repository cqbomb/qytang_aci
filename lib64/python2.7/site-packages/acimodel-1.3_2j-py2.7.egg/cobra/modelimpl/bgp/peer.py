# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Peer(Mo):
    """
    The BGP information pertaining to a peer.

    """

    meta = ClassMeta("cobra.model.bgp.Peer")

    meta.moClassName = "bgpPeer"
    meta.rnFormat = "peer-[%(addr)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "BGP Peer"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.bgp.PeerEntry")
    meta.childClasses.add("cobra.model.bgp.LocalAsn")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.bgp.PeerAf")
    meta.childClasses.add("cobra.model.fault.Counts")

    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.LocalAsn", "localasn"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerEntry", "ent-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.bgp.PeerAf", "af-"))

    meta.parentClasses.add("cobra.model.bgp.Dom")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.l3.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('peer-', True),
    ]

    prop = PropMeta("str", "activePfxPeers", "activePfxPeers", 2583, PropCategory.REGULAR)
    prop.label = "Active Prefix Peers"
    prop.isOper = True
    meta.props.add("activePfxPeers", prop)

    prop = PropMeta("str", "addr", "addr", 2576, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 2577, PropCategory.REGULAR)
    prop.label = "Administrative State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "asn", "asn", 2578, PropCategory.REGULAR)
    prop.label = "Autonomous System Number"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    meta.props.add("asn", prop)

    prop = PropMeta("str", "bgpCfgFailedBmp", "bgpCfgFailedBmp", 14984, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("bgp:Peeraddr_failed_flag", None, 4)
    prop._addConstant("bgp:PeeradminSt_failed_flag", None, 8)
    prop._addConstant("bgp:Peerasn_failed_flag", None, 16)
    prop._addConstant("bgp:Peerctrl_failed_flag", None, 256)
    prop._addConstant("bgp:PeerlcOwn_failed_flag", None, -9223372036854775808)
    prop._addConstant("bgp:PeermodTs_failed_flag", None, 2305843009213693952)
    prop._addConstant("bgp:PeermonPolDn_failed_flag", None, 4096)
    prop._addConstant("bgp:Peername_failed_flag", None, 1)
    prop._addConstant("bgp:Peerpassword_failed_flag", None, 8192)
    prop._addConstant("bgp:PeerprivateASctrl_failed_flag", None, 16384)
    prop._addConstant("bgp:PeersrcIf_failed_flag", None, 32768)
    prop._addConstant("bgp:Peerttl_failed_flag", None, 131072)
    meta.props.add("bgpCfgFailedBmp", prop)

    prop = PropMeta("str", "bgpCfgFailedTs", "bgpCfgFailedTs", 14986, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("bgpCfgFailedTs", prop)

    prop = PropMeta("str", "bgpCfgState", "bgpCfgState", 14985, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("bgpCfgState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 16995, PropCategory.REGULAR)
    prop.label = "Control"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("bfd", "bfd", 1)
    prop._addConstant("dis-conn-check", "disable-connected-check", 2)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "curPfxPeers", "curPfxPeers", 2582, PropCategory.REGULAR)
    prop.label = "Current Prefix Peers"
    prop.isOper = True
    meta.props.add("curPfxPeers", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "maxCurPeers", "maxCurPeers", 2584, PropCategory.REGULAR)
    prop.label = "Maximum Current Peers"
    prop.isOper = True
    meta.props.add("maxCurPeers", prop)

    prop = PropMeta("str", "maxPfxPeers", "maxPfxPeers", 2581, PropCategory.REGULAR)
    prop.label = "Maximum Prefix Peers"
    prop.isOper = True
    meta.props.add("maxPfxPeers", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14449, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "password", "password", 2580, PropCategory.REGULAR)
    prop.label = "Password"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isPassword = True
    meta.props.add("password", prop)

    prop = PropMeta("str", "privateASctrl", "privateASctrl", 22637, PropCategory.REGULAR)
    prop.label = "Private AS Control"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop._addConstant("remove-all", "remove-all-private-as", 2)
    prop._addConstant("remove-exclusive", "remove-private-as", 1)
    prop._addConstant("replace-as", "replace-private-as-with-local-as", 4)
    meta.props.add("privateASctrl", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcIf", "srcIf", 2579, PropCategory.REGULAR)
    prop.label = "Source Interface"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("srcIf", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "totalPfxPeers", "totalPfxPeers", 2585, PropCategory.REGULAR)
    prop.label = "Total Prefix Peers"
    prop.isOper = True
    meta.props.add("totalPfxPeers", prop)

    prop = PropMeta("str", "ttl", "ttl", 16996, PropCategory.REGULAR)
    prop.label = "eBGP Multihop"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("ttl", prop)

    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True

    def __init__(self, parentMoOrDn, addr, markDirty=True, **creationProps):
        namingVals = [addr]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################

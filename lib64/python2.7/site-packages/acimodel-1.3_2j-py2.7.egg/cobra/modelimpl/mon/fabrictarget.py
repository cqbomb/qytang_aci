# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2016 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class FabricTarget(Mo):
    """
    The monitoring target policy model for the fabric semantic scope.

    """

    meta = ClassMeta("cobra.model.mon.FabricTarget")

    meta.moClassName = "monFabricTarget"
    meta.rnFormat = "tarfab-%(scope)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Monitoring Target"
    meta.writeAccessMask = 0x800040000000001
    meta.readAccessMask = 0x8000c0800000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.LcP")
    meta.childClasses.add("cobra.model.svccore.NodePol")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsBtLc")
    meta.childClasses.add("cobra.model.stats.HierColl")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsHlSc")
    meta.childClasses.add("cobra.model.eqptdiagp.LeTsBtSc")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsHlLc")
    meta.childClasses.add("cobra.model.eqptdiagp.TsBtFabP")
    meta.childClasses.add("cobra.model.eqptdiagp.LeTsHlSc")
    meta.childClasses.add("cobra.model.syslog.Src")
    meta.childClasses.add("cobra.model.health.Pol")
    meta.childClasses.add("cobra.model.stats.ExportP")
    meta.childClasses.add("cobra.model.eqptdiagp.LeTsHlLc")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.eqptdiagp.TsHlFabP")
    meta.childClasses.add("cobra.model.event.SevAsnP")
    meta.childClasses.add("cobra.model.eqptdiagp.LeTsBtLc")
    meta.childClasses.add("cobra.model.callhome.Src")
    meta.childClasses.add("cobra.model.stats.Reportable")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsBtSc")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsBtScc")
    meta.childClasses.add("cobra.model.snmp.Src")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsHlFc")
    meta.childClasses.add("cobra.model.fault.SevAsnP")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsBtFc")
    meta.childClasses.add("cobra.model.eqptdiagp.SpTsHlScc")

    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.LeTsBtSc", "leBtSupDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.LeTsHlSc", "leHlSupDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsBtScc", "spBtSccDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsHlScc", "spHlSccDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsBtLc", "spBtLcDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsHlSc", "spHlScDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsHlLc", "spHlLcDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.LeTsHlLc", "leHlLcDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.LeTsBtLc", "leBtLcDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsBtSc", "spBtScDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsHlFc", "spHlFcDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.SpTsBtFc", "spBtFcDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsBtFabP", "btFpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.eqptdiagp.TsHlFabP", "hlFpDiags-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.svccore.NodePol", "nodeCore-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.snmp.Src", "snmpsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Pol", "health-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.syslog.Src", "slsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.event.SevAsnP", "esevp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.callhome.Src", "chsrc-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.SevAsnP", "fsevp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.LcP", "flcp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.HierColl", "coll-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.Reportable", "stat-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.ExportP", "exp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.mon.FabricPol")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.mon.Target")
    meta.superClasses.add("cobra.model.mon.ATarget")

    meta.rnPrefixes = [
        ('tarfab-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13794, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 431, PropCategory.REGULAR)
    prop.label = "Target Scope"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("aaaDomainRef", "reference-to-domain-tag-for-parent-object-(aaa.domainref)", 1562)
    prop._addConstant("aaaIDomainRef", "reference-to-domain-tag-for-parent-object-(aaa.idomainref)", 5294)
    prop._addConstant("aaaLdapEp", "default-ldap-authentication-settings-(aaa.ldapep)", 1597)
    prop._addConstant("aaaLdapProvider", "ldap-provider-(aaa.ldapprovider)", 1606)
    prop._addConstant("aaaRadiusEp", "default-radius-authentication-settings-(aaa.radiusep)", 1596)
    prop._addConstant("aaaRadiusProvider", "radius-provider-(aaa.radiusprovider)", 1605)
    prop._addConstant("aaaTacacsPlusEp", "default-tacacs+-authentication-settings-(aaa.tacacsplusep)", 1598)
    prop._addConstant("aaaTacacsPlusProvider", "tacacs+-provider-(aaa.tacacsplusprovider)", 1607)
    prop._addConstant("aaaUser", "local-user-(aaa.user)", 1496)
    prop._addConstant("aaaUserEp", "user-management-(aaa.userep)", 1491)
    prop._addConstant("acEntity", "atomic-counters-entity-(ac.entity)", 2523)
    prop._addConstant("acRuleIp", "ip-rule-(ac.ruleip)", 2519)
    prop._addConstant("acllogCont", "acl-log-container-(acllog.cont)", 8592)
    prop._addConstant("acllogCtx", "acl-log-context-container-(acllog.ctx)", 8594)
    prop._addConstant("acllogDropL2Flow", "flow-l2-drop-record-(acllog.dropl2flow)", 8605)
    prop._addConstant("acllogDropL2Pkt", "l2-drop-pkt-record-(acllog.dropl2pkt)", 8609)
    prop._addConstant("acllogDropL3Flow", "flow-l3-drop-record-(acllog.dropl3flow)", 8603)
    prop._addConstant("acllogDropL3Pkt", "l3-drop-pkt-record-(acllog.dropl3pkt)", 8607)
    prop._addConstant("acllogPermitL2Flow", "flow-l2-permit-record-(acllog.permitl2flow)", 8604)
    prop._addConstant("acllogPermitL2Pkt", "l2-permit-pkt-record-(acllog.permitl2pkt)", 8608)
    prop._addConstant("acllogPermitL3Flow", "l3-flow-permit-record-(acllog.permitl3flow)", 8602)
    prop._addConstant("acllogPermitL3Pkt", "l3-permit-pkt-record-(acllog.permitl3pkt)", 8606)
    prop._addConstant("acllogTenant", "acl-log-tenant-container-(acllog.tenant)", 8593)
    prop._addConstant("actionLCont", "action-container-(action.lcont)", 22)
    prop._addConstant("actionLSubj", "action-subject-(action.lsubj)", 25)
    prop._addConstant("actionRsLSubjToDomainRef", "relation-from-lsubj-to-aaa-domain-ref-(action.rslsubjtodomainref)", 5570)
    prop._addConstant("actrlEntity", "access-control-entity-(actrl.entity)", 2485)
    prop._addConstant("actrlFlt", "access-control-filter-(actrl.flt)", 2490)
    prop._addConstant("actrlInst", "access-control-instance-(actrl.inst)", 2486)
    prop._addConstant("actrlScope", "access-control-scope-(actrl.scope)", 2487)
    prop._addConstant("actrlStats", "statistics-(actrl.stats)", 7019)
    prop._addConstant("arpDom", "arp-domain-(arp.dom)", 2556)
    prop._addConstant("arpEntity", "arp-entity-(arp.entity)", 2554)
    prop._addConstant("arpIf", "arp-interface-(arp.if)", 2547)
    prop._addConstant("arpInst", "arp-instance-(arp.inst)", 2555)
    prop._addConstant("arpStAdjEp", "arp-static-adjacency-(arp.stadjep)", 2541)
    prop._addConstant("bfdAuthP", "authentication-policy-(bfd.authp)", 5773)
    prop._addConstant("bfdEntity", "bfd-entity-(bfd.entity)", 5776)
    prop._addConstant("bfdIf", "bfd-interface-(bfd.if)", 5774)
    prop._addConstant("bfdIfAf", "interface-address-family-(bfd.ifaf)", 5775)
    prop._addConstant("bfdInst", "bfd-instance-(bfd.inst)", 5777)
    prop._addConstant("bfdInstAf", "instance-address-family-(bfd.instaf)", 5779)
    prop._addConstant("bfdKaP", "keepalive-policy-(bfd.kap)", 5780)
    prop._addConstant("bfdSess", "bfd-session-(bfd.sess)", 5767)
    prop._addConstant("bgpDom", "domain-(bgp.dom)", 2605)
    prop._addConstant("bgpEntity", "bgp-entity-(bgp.entity)", 2628)
    prop._addConstant("bgpInst", "bgp-instance-(bgp.inst)", 2629)
    prop._addConstant("bgpInstPol", "bgp-route-reflector-policy-(bgp.instpol)", 635)
    prop._addConstant("bgpInvalidRREp", "invalidate-route-reflector-selection-(bgp.invalidrrep)", 641)
    prop._addConstant("bgpPeer", "bgp-peer-(bgp.peer)", 2608)
    prop._addConstant("bgpPeerAfEntry", "bgp-peer-address-family-entry-(bgp.peerafentry)", 2612)
    prop._addConstant("bgpPeerEntry", "bgp-peer-entry-(bgp.peerentry)", 2609)
    prop._addConstant("bgpPeerEvents", "peer-events-(bgp.peerevents)", 2610)
    prop._addConstant("bgpRRNodePEp", "route-reflector-node-policy-ep-(bgp.rrnodepep)", 640)
    prop._addConstant("bgpRRP", "route-reflector-profile-(bgp.rrp)", 639)
    prop._addConstant("callhomeDest", "callhome-destination-(callhome.dest)", 1699)
    prop._addConstant("callhomeDestState", "callhome-destination-state-(callhome.deststate)", 5317)
    prop._addConstant("callhomeGroup", "callhome-destination-group-(callhome.group)", 1700)
    prop._addConstant("callhomeInvP", "callhome-inventory-policy-(callhome.invp)", 1702)
    prop._addConstant("callhomeInvTask", "callhome-inventory-task-(callhome.invtask)", 5609)
    prop._addConstant("callhomeProf", "callhome-protocol-profile-(callhome.prof)", 1693)
    prop._addConstant("callhomeRsDestGroup", "relation-to-callhome-destination-group-(callhome.rsdestgroup)", 1695)
    prop._addConstant("callhomeRsDestGroupRel", "relation-to-callhome-destination-group-(callhome.rsdestgrouprel)", 1705)
    prop._addConstant("callhomeRsInvScheduler", "relation-to-callhome-inventory-scheduler-(callhome.rsinvscheduler)", 1703)
    prop._addConstant("callhomeRsQueryGroupRel", "relation-to-callhome-querygroup-(callhome.rsquerygrouprel)", 1697)
    prop._addConstant("callhomeSmtpServer", "smtp-server-for-callhome-(callhome.smtpserver)", 1701)
    prop._addConstant("callhomeSrc", "callhome-source-(callhome.src)", 1694)
    prop._addConstant("capCat", "catalogue-(cap.cat)", 114)
    prop._addConstant("cdpAdjEp", "cdp-adjacency-(cdp.adjep)", 2632)
    prop._addConstant("cdpIf", "cdp-interface-(cdp.if)", 2637)
    prop._addConstant("cdpIfPol", "cdp-interface-policy-(cdp.ifpol)", 684)
    prop._addConstant("cdpInst", "cdp-instance-(cdp.inst)", 2640)
    prop._addConstant("cnwAggrIf", "controller-aggregated-interface-(cnw.aggrif)", 396)
    prop._addConstant("cnwPhysIf", "controller-physical-interface-(cnw.physif)", 401)
    prop._addConstant("commHttp", "http-service-(comm.http)", 1577)
    prop._addConstant("commHttps", "http-ssl-configuration-(comm.https)", 1578)
    prop._addConstant("commPol", "communication-policy-(comm.pol)", 1572)
    prop._addConstant("commRsKeyRing", "key-ring-(comm.rskeyring)", 5530)
    prop._addConstant("commWebServer", "web-server-(comm.webserver)", 6444)
    prop._addConstant("compRsCtrlrP", "relation-to-vmm-controller-profile-(comp.rsctrlrp)", 1259)
    prop._addConstant("conditionNodePolGrp", "historical-record-node-policy-group-(condition.nodepolgrp)", 1724)
    prop._addConstant("conditionPodPolGrp", "historical-record-node-pod-policy-group-(condition.podpolgrp)", 7036)
    prop._addConstant("conditionRsNodeAaaRecRetP", "node-audit-record-retention-policy-(condition.rsnodeaaarecretp)", 1729)
    prop._addConstant("conditionRsNodeEventRecRetP", "node-event-record-retention-policy-(condition.rsnodeeventrecretp)", 1727)
    prop._addConstant("conditionRsNodeFaultRecRetP", "node-fault-record-retention-policy-(condition.rsnodefaultrecretp)", 1725)
    prop._addConstant("conditionRsNodeHealthRecRetP", "node-health-record-retention-policy-(condition.rsnodehealthrecretp)", 1731)
    prop._addConstant("conditionRsToNodePolGrp", "historical-record-node-policy-group-(condition.rstonodepolgrp)", 7037)
    prop._addConstant("configBackupStatusCont", "config-backup-status-container-(config.backupstatuscont)", 259)
    prop._addConstant("configExportP", "configuration-export-policy-(config.exportp)", 258)
    prop._addConstant("configImportIdP", "id-import-policy-(config.importidp)", 7309)
    prop._addConstant("configImportP", "configuration-import-policy-(config.importp)", 269)
    prop._addConstant("configJob", "job-instance-(config.job)", 261)
    prop._addConstant("configJobCont", "policy-job-container-(config.jobcont)", 260)
    prop._addConstant("configRollbackP", "configuration-snapshot-rollback-policy-(config.rollbackp)", 6790)
    prop._addConstant("configRsExportDestination", "export-destination-(config.rsexportdestination)", 265)
    prop._addConstant("configRsExportScheduler", "export-scheduler-(config.rsexportscheduler)", 263)
    prop._addConstant("configRsImportSource", "import-source-(config.rsimportsource)", 270)
    prop._addConstant("configRsRemotePath", "backup-remote-path-(config.rsremotepath)", 6212)
    prop._addConstant("configSnapshotMgrP", "configuration-snapshot-manager-policy-(config.snapshotmgrp)", 6890)
    prop._addConstant("configSubJob", "subjob-(config.subjob)", 262)
    prop._addConstant("coopCitizenAdj", "citizen-adjacency-(coop.citizenadj)", 2573)
    prop._addConstant("coopDom", "coop-domain-(coop.dom)", 2575)
    prop._addConstant("coopEntity", "coop-entity-(coop.entity)", 2598)
    prop._addConstant("coopInst", "coop-instance-(coop.inst)", 2599)
    prop._addConstant("coopOracleAdj", "oracle-adjacency-(coop.oracleadj)", 2572)
    prop._addConstant("coopRepP", "repository-policy-(coop.repp)", 2587)
    prop._addConstant("coppClass", "class-(copp.class)", 2503)
    prop._addConstant("coppEntity", "copp-entity-(copp.entity)", 2506)
    prop._addConstant("ctrlrInst", "controller-(ctrlr.inst)", 1737)
    prop._addConstant("ctxApplication", "application-context-(ctx.application)", 245)
    prop._addConstant("ctxLocal", "local-context-(ctx.local)", 244)
    prop._addConstant("datetimeClkPol", "date-time-policy-(datetime.clkpol)", 3955)
    prop._addConstant("datetimeConfIssues", "datetime-policy-configuration-issues-(datetime.confissues)", 5275)
    prop._addConstant("datetimeNtpProv", "providers-(datetime.ntpprov)", 4529)
    prop._addConstant("datetimeNtpProvider", "ntp-server-(datetime.ntpprovider)", 3957)
    prop._addConstant("datetimeNtpProviderStatus", "providerstatus-(datetime.ntpproviderstatus)", 3960)
    prop._addConstant("datetimeNtpq", "ntp-concrete-details-(datetime.ntpq)", 6011)
    prop._addConstant("datetimePol", "date-and-time-policy-(datetime.pol)", 4525)
    prop._addConstant("datetimeRsNtpProvToNtpAuthKey", "relation-to-datetime-authentication-key-(datetime.rsntpprovtontpauthkey)", 4532)
    prop._addConstant("dbgAC", "atomic-counters-(dbg.ac)", 3983)
    prop._addConstant("dbgAcPath", "atomic-counter-for-a-path-(dbg.acpath)", 4058)
    prop._addConstant("dbgAcTrail", "atomic-counter-for-a-trail-(dbg.actrail)", 4060)
    prop._addConstant("dbgAnyToEpRslt", "epg-to-any-atomic-counter-entry-stats-(dbg.anytoeprslt)", 4045)
    prop._addConstant("dbgCores", "service-cores-(dbg.cores)", 3984)
    prop._addConstant("dbgDVPCPath", "atomic-counter-for-a-path-from-a-single-node-to-a-vpc-pair-(dbg.dvpcpath)", 5458)
    prop._addConstant("dbgEpToAnyRslt", "ep-to-any-atomic-counter-entry-stats-(dbg.eptoanyrslt)", 4044)
    prop._addConstant("dbgEpToEpRslt", "ep-to-ep-atomic-counter-entry-stats-(dbg.eptoeprslt)", 4041)
    prop._addConstant("dbgEpToEpgRslt", "ep-to-epg-atomic-counter-entry-stats-(dbg.eptoepgrslt)", 4046)
    prop._addConstant("dbgEpToIpRslt", "ep-to-ip-atomic-counter-entry-stats-(dbg.eptoiprslt)", 4042)
    prop._addConstant("dbgEpgToEpRslt", "epg-to-ep-atomic-counter-entry-stats-(dbg.epgtoeprslt)", 4047)
    prop._addConstant("dbgEpgToEpgRslt", "epg-to-epg-atomic-counter-entry-stats-(dbg.epgtoepgrslt)", 4050)
    prop._addConstant("dbgEpgToIpRslt", "epg-to-external-ip-atomic-counter-entry-stats-(dbg.epgtoiprslt)", 4048)
    prop._addConstant("dbgExpertRslt", "expert-level-atomic-counter-entry-stats-(dbg.expertrslt)", 4051)
    prop._addConstant("dbgFiveTupleRslt", "five-tuple-atomic-counter-entry-stats-(dbg.fivetuplerslt)", 4052)
    prop._addConstant("dbgIpToEpRslt", "ip-to-ep-atomic-counter-entry-stats-(dbg.iptoeprslt)", 4043)
    prop._addConstant("dbgIpToEpgRslt", "ip-to-epg-atomic-counter-entry-stats-(dbg.iptoepgrslt)", 4049)
    prop._addConstant("dbgIpToIpRslt", "ip-to-ip-atomic-counter-entry-stats-(dbg.iptoiprslt)", 7822)
    prop._addConstant("dbgNDbgs", "node-level-debug-data-container-(dbg.ndbgs)", 3981)
    prop._addConstant("dbgProfile", "atomic-counter-profile-for-spcific-tenant-(dbg.profile)", 4039)
    prop._addConstant("dbgRemotePort", "remote-port-debug-information-(dbg.remoteport)", 3985)
    prop._addConstant("dbgRsTenantToDomainRef", "relation-from-tenant-to-aaa-domain-ref-(dbg.rstenanttodomainref)", 5560)
    prop._addConstant("dbgSDVPCPath", "atomic-counter-for-a-path-from-a-vpc-pair-to-a-vpc-pair-(dbg.sdvpcpath)", 5456)
    prop._addConstant("dbgSVPCPath", "atomic-counter-for-a-path-from-a-vpc-pair-to-a-single-node-(dbg.svpcpath)", 5457)
    prop._addConstant("dbgTenant", "atomic-counters-for-spcific-tenant-(dbg.tenant)", 4038)
    prop._addConstant("dbgexpCoreP", "core-export-policy-(dbgexp.corep)", 4111)
    prop._addConstant("dbgexpRsData", "relation-to-techsupport-data-collection-policy-(dbgexp.rsdata)", 4107)
    prop._addConstant("dbgexpRsExportDest", "export-destination-policy-(dbgexp.rsexportdest)", 4105)
    prop._addConstant("dbgexpRsTSScheduler", "relation-to-techsupport-scheduler-policy-(dbgexp.rstsscheduler)", 4113)
    prop._addConstant("dbgexpRsUserCtx", "relation-to-l3-context-export-policy-(dbgexp.rsuserctx)", 4109)
    prop._addConstant("dbgexpTechSupODev", "techsupport-export-policy-for-odev-(dbgexp.techsupodev)", 7618)
    prop._addConstant("dbgexpTechSupOnD", "techsupport-export-on-demand-(dbgexp.techsupond)", 4115)
    prop._addConstant("dbgexpTechSupP", "techsupport-export-policy-(dbgexp.techsupp)", 4112)
    prop._addConstant("dbgexpTechSupVmm", "techsupport-export-policy-for-vmm-(dbgexp.techsupvmm)", 7616)
    prop._addConstant("dhcpClientIf", "dhcp-client-interface-(dhcp.clientif)", 2687)
    prop._addConstant("dhcpDiscNode", "dhcp-discovered-client-node-(dhcp.discnode)", 2705)
    prop._addConstant("dhcpEntity", "dhcp-entity-(dhcp.entity)", 2708)
    prop._addConstant("dhcpInst", "dhcp-instance-(dhcp.inst)", 2709)
    prop._addConstant("dhcpNodeGrp", "dhcp-node-group-(dhcp.nodegrp)", 1448)
    prop._addConstant("dhcpOptionDef", "dhcp-option-(dhcp.optiondef)", 1446)
    prop._addConstant("dhcpPodGrp", "dhcp-pod-group-(dhcp.podgrp)", 7033)
    prop._addConstant("dhcpProvDhcp", "dhcp-provider-(dhcp.provdhcp)", 1464)
    prop._addConstant("dhcpRelayIf", "dhcp-relay-interface-(dhcp.relayif)", 2690)
    prop._addConstant("dhcpRelayP", "dhcp-relay-policy-(dhcp.relayp)", 1430)
    prop._addConstant("dhcpRsProv", "dhcp-provider-(dhcp.rsprov)", 1431)
    prop._addConstant("dhcpRsRelayP", "dhcp-relay-policy-(dhcp.rsrelayp)", 1449)
    prop._addConstant("dhcpRsToNodeGrp", "dhcp-node-group-(dhcp.rstonodegrp)", 7034)
    prop._addConstant("dppClass", "class-(dpp.class)", 7544)
    prop._addConstant("dppEntity", "dpp-entity-(dpp.entity)", 7543)
    prop._addConstant("dppIf", "dpp-interface-(dpp.if)", 7545)
    prop._addConstant("eigrpAdjEp", "eigrp-neighbor-(eigrp.adjep)", 5845)
    prop._addConstant("eigrpInst", "eigrp-instance-(eigrp.inst)", 5849)
    prop._addConstant("eptrkIpEpExec", "ip-endpoint-exec-(eptrk.ipepexec)", 5701)
    prop._addConstant("eptrkMacEpExec", "mac-endpoint-exec-(eptrk.macepexec)", 5702)
    prop._addConstant("eqptAsic", "asic-(eqpt.asic)", 3361)
    prop._addConstant("eqptBSlot", "board-slot-(eqpt.bslot)", 515)
    prop._addConstant("eqptBoard", "board-equipment-(eqpt.board)", 512)
    prop._addConstant("eqptCh", "chassis-(eqpt.ch)", 3337)
    prop._addConstant("eqptCpuP", "cpu-port-(eqpt.cpup)", 2996)
    prop._addConstant("eqptEntity", "equipment-policy-entity-(eqpt.entity)", 3359)
    prop._addConstant("eqptExtCh", "fex-(eqpt.extch)", 3338)
    prop._addConstant("eqptExtChCardSlot", "fex-slot-(eqpt.extchcardslot)", 3344)
    prop._addConstant("eqptFC", "fabric-module-(eqpt.fc)", 3205)
    prop._addConstant("eqptFCSlot", "fabric-module-slot-(eqpt.fcslot)", 3342)
    prop._addConstant("eqptFabP", "fabric-port-(eqpt.fabp)", 3004)
    prop._addConstant("eqptFan", "equipment-fan-(eqpt.fan)", 3279)
    prop._addConstant("eqptFpga", "fpga-(eqpt.fpga)", 3231)
    prop._addConstant("eqptFt", "fan-tray-(eqpt.ft)", 3278)
    prop._addConstant("eqptFtSlot", "fan-tray-slot-(eqpt.ftslot)", 3346)
    prop._addConstant("eqptLC", "line-module-(eqpt.lc)", 3204)
    prop._addConstant("eqptLCSlot", "line-module-slot-(eqpt.lcslot)", 3341)
    prop._addConstant("eqptNSlot", "nic-slot-(eqpt.nslot)", 516)
    prop._addConstant("eqptNic", "nic-(eqpt.nic)", 513)
    prop._addConstant("eqptPsgP", "power-supply-group-policy-(eqpt.psgp)", 2990)
    prop._addConstant("eqptPsu", "power-supply-unit-(eqpt.psu)", 2989)
    prop._addConstant("eqptPsuSlot", "power-supply-slot-(eqpt.psuslot)", 3345)
    prop._addConstant("eqptSensor", "equipment-sensor-(eqpt.sensor)", 3255)
    prop._addConstant("eqptSpromBP", "backplane-sprom-(eqpt.sprombp)", 3252)
    prop._addConstant("eqptSpromFan", "fan-sprom-(eqpt.spromfan)", 3250)
    prop._addConstant("eqptSpromLc", "linecard-sprom-(eqpt.spromlc)", 3254)
    prop._addConstant("eqptSpromPsu", "power-supply-unit-sprom-(eqpt.sprompsu)", 3251)
    prop._addConstant("eqptSpromSup", "supervisor-sprom-(eqpt.spromsup)", 3253)
    prop._addConstant("eqptStorage", "storage-equipment-(eqpt.storage)", 517)
    prop._addConstant("eqptSupC", "supervisor-module-(eqpt.supc)", 3203)
    prop._addConstant("eqptSupCSlot", "supervisor-slot-(eqpt.supcslot)", 3340)
    prop._addConstant("eqptSysC", "system-controller-module-(eqpt.sysc)", 3206)
    prop._addConstant("eqptSysCSlot", "system-controller-module-slot-(eqpt.syscslot)", 3343)
    prop._addConstant("eqptcapacityEntity", "equipment-capacity-entity-(eqptcapacity.entity)", 2908)
    prop._addConstant("eqptcapacityFSPartition", "file-system-partition-(eqptcapacity.fspartition)", 7016)
    prop._addConstant("eqptdiagEntity", "equipment-diagnostics-entity-(eqptdiag.entity)", 2966)
    prop._addConstant("eqptdiagOnDRule", "on-demand-rule-diag-rule-(eqptdiag.ondrule)", 2969)
    prop._addConstant("eqptdiagOnDSubj", "on-demand-equipment-diag-subject-(eqptdiag.ondsubj)", 2972)
    prop._addConstant("eqptdiagRslt", "result-(eqptdiag.rslt)", 2973)
    prop._addConstant("eqptdiagRule", "equipment-diag-rule-(eqptdiag.rule)", 2968)
    prop._addConstant("eqptdiagSubj", "equipment-diag-subject-(eqptdiag.subj)", 2971)
    prop._addConstant("ethpmFcot", "fcot-(ethpm.fcot)", 3648)
    prop._addConstant("ethpmFcotX2", "x2-fcot-(ethpm.fcotx2)", 3650)
    prop._addConstant("ethpmPhysIf", "physical-interface-runtime-state-(ethpm)-(ethpm.physif)", 3641)
    prop._addConstant("eventSevAsnP", "event-severity-assignment-policy-(event.sevasnp)", 1684)
    prop._addConstant("fabricAutoGEp", "vpc-auto-protection-group-(fabric.autogep)", 986)
    prop._addConstant("fabricCreatedBy", "to-fix---fabric.createdby", 867)
    prop._addConstant("fabricCtrlrP", "controller-profile-(fabric.ctrlrp)", 871)
    prop._addConstant("fabricCtrlrPGrp", "controller-policy-group-(fabric.ctrlrpgrp)", 894)
    prop._addConstant("fabricCtrlrS", "controller-selector-(fabric.ctrlrs)", 816)
    prop._addConstant("fabricDecommissionJob", "decommission-job-(fabric.decommissionjob)", 681)
    prop._addConstant("fabricExplicitGEp", "vpc-explicit-protection-group-(fabric.explicitgep)", 990)
    prop._addConstant("fabricExtPathEpCont", "extended-fabric-path-ep-container-(fabric.extpathepcont)", 491)
    prop._addConstant("fabricExtProtPathEpCont", "fabric-extended-protected-path-end-point-container-(fabric.extprotpathepcont)", 6024)
    prop._addConstant("fabricFuncP", "function-profile-(fabric.funcp)", 890)
    prop._addConstant("fabricHIfPol", "link-level-policy-(fabric.hifpol)", 847)
    prop._addConstant("fabricHeartbeat", "fabric-node-heartbeat-(fabric.heartbeat)", 5241)
    prop._addConstant("fabricIPV4AutoG", "spine-ipv4-protection-group-(fabric.ipv4autog)", 988)
    prop._addConstant("fabricIPV4ExpG", "ipv4-protection-group-(fabric.ipv4expg)", 992)
    prop._addConstant("fabricIPV4ProtPol", "spine-ipv4-protection-grp-policy-realtion-(fabric.ipv4protpol)", 977)
    prop._addConstant("fabricIPV6AutoG", "spine-ipv6-protection-group-(fabric.ipv6autog)", 989)
    prop._addConstant("fabricIPV6ExpG", "ipv6-protection-group-(fabric.ipv6expg)", 993)
    prop._addConstant("fabricIPV6ProtPol", "spine-ipv6-protection-group-policy-(fabric.ipv6protpol)", 978)
    prop._addConstant("fabricInst", "fabric-instance-(fabric.inst)", 1004)
    prop._addConstant("fabricLFPathS", "leaf-path-selector-(fabric.lfpaths)", 6091)
    prop._addConstant("fabricLFPortS", "leaf-fabric-port-selector-(fabric.lfports)", 840)
    prop._addConstant("fabricLeCardP", "leaf-module-profile-(fabric.lecardp)", 885)
    prop._addConstant("fabricLeCardPGrp", "leaf-module-policy-group-(fabric.lecardpgrp)", 930)
    prop._addConstant("fabricLeCardS", "leaf-module-selector-(fabric.lecards)", 832)
    prop._addConstant("fabricLeNodePGrp", "leaf-switch-policy-group-(fabric.lenodepgrp)", 926)
    prop._addConstant("fabricLePortP", "leaf-fabric-interface-profile-(fabric.leportp)", 888)
    prop._addConstant("fabricLePortPGrp", "leaf-fabric-port-policy-group-(fabric.leportpgrp)", 964)
    prop._addConstant("fabricLeafP", "leaf-switch-profile-(fabric.leafp)", 874)
    prop._addConstant("fabricLeafS", "switch-association-(fabric.leafs)", 824)
    prop._addConstant("fabricLink", "fabric-link-(fabric.link)", 504)
    prop._addConstant("fabricLinkCont", "container-of-fabric-links-(fabric.linkcont)", 503)
    prop._addConstant("fabricLooseNode", "unmanaged-fabric-node-(fabric.loosenode)", 498)
    prop._addConstant("fabricMACProtPol", "spine-mac-protection-grp-policy-(fabric.macprotpol)", 976)
    prop._addConstant("fabricMacAutoG", "spine-mac-protection-group-(fabric.macautog)", 987)
    prop._addConstant("fabricMacExpG", "mac-protection-group-(fabric.macexpg)", 991)
    prop._addConstant("fabricNode", "fabric-node-(fabric.node)", 443)
    prop._addConstant("fabricNodeCfg", "node-configuration-(fabric.nodecfg)", 852)
    prop._addConstant("fabricNodeCfgCont", "node-configuration-container-(fabric.nodecfgcont)", 851)
    prop._addConstant("fabricNodeIdentP", "fabric-node-member-(fabric.nodeidentp)", 791)
    prop._addConstant("fabricNodeIdentPol", "fabric-membership-policy-(fabric.nodeidentpol)", 790)
    prop._addConstant("fabricNodeInfo", "node-info-(fabric.nodeinfo)", 5270)
    prop._addConstant("fabricNodePEp", "node-policy-end-point-(fabric.nodepep)", 995)
    prop._addConstant("fabricNodeTaskHolder", "node-task-holder-(fabric.nodetaskholder)", 5271)
    prop._addConstant("fabricOOServicePol", "out-of-service-fabric-policy-(fabric.ooservicepol)", 671)
    prop._addConstant("fabricOosPathIssues", "fabric-out-of-service-path-issues-(fabric.oospathissues)", 5182)
    prop._addConstant("fabricPath", "fabric-path-(fabric.path)", 483)
    prop._addConstant("fabricPathEp", "fabric-path-end-point-(fabric.pathep)", 493)
    prop._addConstant("fabricPathEpCleanup", "pathep-cleanup-request-(fabric.pathepcleanup)", 7186)
    prop._addConstant("fabricPathEpCleanupShard", "cleanup-request-for-shard-(fabric.pathepcleanupshard)", 7188)
    prop._addConstant("fabricPathEpCont", "fabric-path-end-point-container-(fabric.pathepcont)", 489)
    prop._addConstant("fabricPmPathEpCleanup", "pm-pathep-cleanup-request-(fabric.pmpathepcleanup)", 7187)
    prop._addConstant("fabricPod", "fabric-pod-(fabric.pod)", 442)
    prop._addConstant("fabricPodP", "pod-profile-(fabric.podp)", 872)
    prop._addConstant("fabricPodPGrp", "pod-policy-group-(fabric.podpgrp)", 901)
    prop._addConstant("fabricPodS", "pod-selector-(fabric.pods)", 819)
    prop._addConstant("fabricProtChainP", "node-protection-chain-profile-(fabric.protchainp)", 997)
    prop._addConstant("fabricProtPathEpCont", "fabric-protected-path-end-point-container-(fabric.protpathepcont)", 490)
    prop._addConstant("fabricProtPol", "virtual-port-channel-security-policy-(fabric.protpol)", 975)
    prop._addConstant("fabricRsApplCoreP", "tech-support-policy-(fabric.rsapplcorep)", 897)
    prop._addConstant("fabricRsApplMonPol", "monitoring-policy-(fabric.rsapplmonpol)", 899)
    prop._addConstant("fabricRsApplTechSupOnD", "tech-support-policy-for-on-demand-collection-(fabric.rsappltechsupond)", 5207)
    prop._addConstant("fabricRsApplTechSupP", "tech-support-policy-(fabric.rsappltechsupp)", 895)
    prop._addConstant("fabricRsCallhomeInvPol", "callhome-inventory-policy-(fabric.rscallhomeinvpol)", 923)
    prop._addConstant("fabricRsCommPol", "communication-policy-(fabric.rscommpol)", 908)
    prop._addConstant("fabricRsCtrlrPGrp", "controller-policy-group-(fabric.rsctrlrpgrp)", 817)
    prop._addConstant("fabricRsCtrlrPolGroup", "controller-policy-group-(fabric.rsctrlrpolgroup)", 857)
    prop._addConstant("fabricRsDecommissionNode", "decommission-node-(fabric.rsdecommissionnode)", 678)
    prop._addConstant("fabricRsInterfacePolProfile", "super-class-for-relation-from-node-to-fabric-policies-deployed-on-node-(fabric.rsinterfacepolprofile)", 865)
    prop._addConstant("fabricRsLeCardP", "leaf-module-profile-(fabric.rslecardp)", 875)
    prop._addConstant("fabricRsLeCardPGrp", "leaf-module-policy-group-(fabric.rslecardpgrp)", 833)
    prop._addConstant("fabricRsLeNodeP", "leaf-node-profile-(fabric.rslenodep)", 7029)
    prop._addConstant("fabricRsLeNodePGrp", "leaf-node-policy-group-(fabric.rslenodepgrp)", 825)
    prop._addConstant("fabricRsLePortP", "leaf-interface-profile-(fabric.rsleportp)", 877)
    prop._addConstant("fabricRsLePortPGrp", "leaf-port-policy-group-(fabric.rsleportpgrp)", 841)
    prop._addConstant("fabricRsModulePolProfile", "super-class-for-relation-from-node-to-fabric-policies-deployed-on-node-(fabric.rsmodulepolprofile)", 863)
    prop._addConstant("fabricRsMonIfFabricPol", "monitoring-policy-(fabric.rsmoniffabricpol)", 892)
    prop._addConstant("fabricRsMonInstFabricPol", "monitoring-policy-(fabric.rsmoninstfabricpol)", 919)
    prop._addConstant("fabricRsMonModuleFabricPol", "monitoring-policy-(fabric.rsmonmodulefabricpol)", 928)
    prop._addConstant("fabricRsNodeCoreP", "tech-support-policy-(fabric.rsnodecorep)", 917)
    prop._addConstant("fabricRsNodeGroup", "to-fix---fabric.rsnodegroup", 5278)
    prop._addConstant("fabricRsNodePolGroup", "super-class-for-relation-from-node-to-fabric-policies-deployed-on-node-(fabric.rsnodepolgroup)", 861)
    prop._addConstant("fabricRsNodeTechSupP", "tech-support-policy-(fabric.rsnodetechsupp)", 915)
    prop._addConstant("fabricRsOosPath", "out-of-service-fabric-path-(fabric.rsoospath)", 674)
    prop._addConstant("fabricRsPathToLePortPGrp", "leaf-port-policy-group-(fabric.rspathtoleportpgrp)", 6094)
    prop._addConstant("fabricRsPathToSpPortPGrp", "spine-port-policy-group-(fabric.rspathtospportpgrp)", 6099)
    prop._addConstant("fabricRsPodPGrp", "pod-policy-group-(fabric.rspodpgrp)", 820)
    prop._addConstant("fabricRsPodPGrpBGPRRP", "bgp-instance-policy-(fabric.rspodpgrpbgprrp)", 904)
    prop._addConstant("fabricRsPodPGrpCoopP", "coop-group-policy-(fabric.rspodpgrpcoopp)", 910)
    prop._addConstant("fabricRsPodPGrpIsisDomP", "isis-domain-policy-(fabric.rspodpgrpisisdomp)", 902)
    prop._addConstant("fabricRsPodPolGroup", "pod-policy-group-(fabric.rspodpolgroup)", 859)
    prop._addConstant("fabricRsPsuInstPol", "psu-instance-policy-(fabric.rspsuinstpol)", 921)
    prop._addConstant("fabricRsResAuditSwRetP", "switch-audit-log-retention-policy-(fabric.rsresauditswretp)", 763)
    prop._addConstant("fabricRsResCatFwP", "catalog-firmware-profile-relation-(fabric.rsrescatfwp)", 725)
    prop._addConstant("fabricRsResCoopPol", "fabric-coop-group-policy-(fabric.rsrescooppol)", 717)
    prop._addConstant("fabricRsResCoreP", "core-export-policy-(fabric.rsrescorep)", 788)
    prop._addConstant("fabricRsResEventSwRetP", "switch-event-retention-policy-(fabric.rsreseventswretp)", 761)
    prop._addConstant("fabricRsResFabricIPV4ProtPol", "spine-ipv4-protection-group-policy-(fabric.rsresfabricipv4protpol)", 721)
    prop._addConstant("fabricRsResFabricIPV6ProtPol", "spine-ipv6-protection-group-policy-(fabric.rsresfabricipv6protpol)", 5722)
    prop._addConstant("fabricRsResFabricMACProtPol", "spine-mac-protection-group-policy-(fabric.rsresfabricmacprotpol)", 719)
    prop._addConstant("fabricRsResFabricProtChainP", "node-protection-chain-profile-relation-(fabric.rsresfabricprotchainp)", 723)
    prop._addConstant("fabricRsResFaultSwRetP", "switch-fault-retention-policy-(fabric.rsresfaultswretp)", 759)
    prop._addConstant("fabricRsResHealthPols", "container-for-health-score-policy-relation-(fabric.rsreshealthpols)", 767)
    prop._addConstant("fabricRsResHealthSwRetP", "switch-health-retention-policy-(fabric.rsreshealthswretp)", 765)
    prop._addConstant("fabricRsResL2InstPol", "fabric-l2-mtu-policy-(fabric.rsresl2instpol)", 769)
    prop._addConstant("fabricRsResLbPol", "fabric-load-balance-relation-policy-(fabric.rsreslbpol)", 715)
    prop._addConstant("fabricRsResLldpInstPol", "lldp-policy-(fabric.rsreslldpinstpol)", 713)
    prop._addConstant("fabricRsResMonCommonPol", "fabric-common-monitoring-policy-relation-(fabric.rsresmoncommonpol)", 733)
    prop._addConstant("fabricRsResMonFabricPol", "fabric-monitoring-policy-relation-(fabric.rsresmonfabricpol)", 729)
    prop._addConstant("fabricRsResOngoingAcMode", "ongoing-atomic-counters-mode-relation-(fabric.rsresongoingacmode)", 5630)
    prop._addConstant("fabricRsResPsuInstPol", "power-supply-redundancy-policy-(fabric.rsrespsuinstpol)", 5211)
    prop._addConstant("fabricRsResTechSupP", "tech-support-export-policy-(fabric.rsrestechsupp)", 786)
    prop._addConstant("fabricRsSnmpPol", "snmp-policy-(fabric.rssnmppol)", 912)
    prop._addConstant("fabricRsSpCardP", "spine-module-profile-(fabric.rsspcardp)", 880)
    prop._addConstant("fabricRsSpCardPGrp", "spine-module-policy-group-(fabric.rsspcardpgrp)", 836)
    prop._addConstant("fabricRsSpNodeP", "spine-node-profile-(fabric.rsspnodep)", 7031)
    prop._addConstant("fabricRsSpNodePGrp", "spine-node-policy-group-(fabric.rsspnodepgrp)", 828)
    prop._addConstant("fabricRsSpPortP", "spine-interface-profile-(fabric.rsspportp)", 882)
    prop._addConstant("fabricRsSpPortPGrp", "spine-port-policy-group-(fabric.rsspportpgrp)", 844)
    prop._addConstant("fabricRsTimePol", "datetime-policy-(fabric.rstimepol)", 906)
    prop._addConstant("fabricRsToFabricIPV6ProtPol", "spine-ipv6-protection-group-policy-(fabric.rstofabricipv6protpol)", 6881)
    prop._addConstant("fabricRsToFabricPathS", "super-class-for-relation-from-node-to-interface-path-selector-(fabric.rstofabricpaths)", 6111)
    prop._addConstant("fabricRsVpcInstPol", "relation-to-vpc-domain-policy-(fabric.rsvpcinstpol)", 981)
    prop._addConstant("fabricSFPathS", "spine-path-selector-(fabric.sfpaths)", 6096)
    prop._addConstant("fabricSFPortS", "spine-fabric-port-selector-(fabric.sfports)", 843)
    prop._addConstant("fabricSelectorIssues", "fabric-selector-configuration-issues-(fabric.selectorissues)", 806)
    prop._addConstant("fabricShardTaskHolder", "node-task-holder-(fabric.shardtaskholder)", 5272)
    prop._addConstant("fabricSpCardP", "spine-module-profile-(fabric.spcardp)", 886)
    prop._addConstant("fabricSpCardPGrp", "spine-module-policy-group-(fabric.spcardpgrp)", 937)
    prop._addConstant("fabricSpCardS", "spine-module-selector-(fabric.spcards)", 835)
    prop._addConstant("fabricSpNodePGrp", "spine-switch-policy-group-(fabric.spnodepgrp)", 925)
    prop._addConstant("fabricSpPortP", "spine-fabric-interface-profile-(fabric.spportp)", 889)
    prop._addConstant("fabricSpPortPGrp", "spine-fabric-port-policy-group-(fabric.spportpgrp)", 969)
    prop._addConstant("fabricSpineP", "spine-switch-profile-(fabric.spinep)", 879)
    prop._addConstant("fabricSpineS", "spine-selector-(fabric.spines)", 827)
    prop._addConstant("fabricSubsDfltPolicy", "default-policies-subscription-(fabric.subsdfltpolicy)", 6880)
    prop._addConstant("fabricTopology", "fabric-topology-(fabric.topology)", 402)
    prop._addConstant("fabricTrail", "fabric-trail-(fabric.trail)", 486)
    prop._addConstant("faultSevAsnP", "fault-severity-assignment-policy-(fault.sevasnp)", 1733)
    prop._addConstant("fileRemotePath", "remote-path-of-a-file-(file.remotepath)", 1674)
    prop._addConstant("fileRsARemoteHostToEpp", "relation-to-remote-host-reachability-epp-(file.rsaremotehosttoepp)", 5360)
    prop._addConstant("firmwareCardRunning", "card-running-status-(firmware.cardrunning)", 2983)
    prop._addConstant("firmwareCcoSource", "cco-firmware-source-(firmware.ccosource)", 347)
    prop._addConstant("firmwareCompRunning", "equipment-component-running-status-(firmware.comprunning)", 2984)
    prop._addConstant("firmwareCtrlrFwStatusCont", "fw-status-container-(firmware.ctrlrfwstatuscont)", 358)
    prop._addConstant("firmwareDownload", "firmware-download-status-(firmware.download)", 346)
    prop._addConstant("firmwareFwGrp", "firmware-group-(firmware.fwgrp)", 353)
    prop._addConstant("firmwareFwStatusCont", "fw-status-container-(firmware.fwstatuscont)", 357)
    prop._addConstant("firmwareInternalSource", "internal-firmware-source-(firmware.internalsource)", 349)
    prop._addConstant("firmwareOSource", "firmware-download-task-(firmware.osource)", 348)
    prop._addConstant("firmwarePodFwGrp", "pod-firmware-group-(firmware.podfwgrp)", 7020)
    prop._addConstant("firmwareRepoP", "firmware-repository-profile-(firmware.repop)", 344)
    prop._addConstant("firmwareRsFwgrpp", "relation-to-firmware-group-(firmware.rsfwgrpp)", 354)
    prop._addConstant("firmwareRsToFwGrp", "firmware-group-(firmware.rstofwgrp)", 7021)
    prop._addConstant("fmcastTreeEp", "multicast-tree-ep-(fmcast.treeep)", 2123)
    prop._addConstant("fvCEp", "client-end-point-(fv.cep)", 2033)
    prop._addConstant("fvCollectionCont", "contract-container-(fv.collectioncont)", 2083)
    prop._addConstant("fvCtrctCtxDefCont", "internal-mo-used-to-update-context-shard-with-contract-info-(fv.ctrctctxdefcont)", 5501)
    prop._addConstant("fvCtxSharedServiceUpdate", "ctx-shared-service-update-(fv.ctxsharedserviceupdate)", 7215)
    prop._addConstant("fvDomDef", "domain-(fv.domdef)", 1852)
    prop._addConstant("fvIp", "to-fix---fv.ip", 5205)
    prop._addConstant("fvNwIssues", "network-configuration-issues-(fv.nwissues)", 2113)
    prop._addConstant("fvOrchsInfo", "orchestrator-configuration-for-this-epg-(fv.orchsinfo)", 5566)
    prop._addConstant("fvRInfoHolder", "rule-info-holder-(fv.rinfoholder)", 1896)
    prop._addConstant("fvRsBDSubnetToOut", "outside-(fv.rsbdsubnettoout)", 1835)
    prop._addConstant("fvRsBDSubnetToProfile", "route-control-profile-(fv.rsbdsubnettoprofile)", 1833)
    prop._addConstant("fvRsCons", "contract-consumer-(fv.rscons)", 1904)
    prop._addConstant("fvRsConsIf", "contract-interface-(fv.rsconsif)", 1906)
    prop._addConstant("fvRsCustQosPol", "custom-qos-policy-(fv.rscustqospol)", 1900)
    prop._addConstant("fvRsDomDefNsLocal", "vxlan-pool-(fv.rsdomdefnslocal)", 1855)
    prop._addConstant("fvRsNdPfxPol", "nd-prefix-policy-(fv.rsndpfxpol)", 6121)
    prop._addConstant("fvRsProtBy", "taboo-contract-(fv.rsprotby)", 1916)
    prop._addConstant("fvRsProv", "contract-provider-(fv.rsprov)", 1902)
    prop._addConstant("fvRtDestEpg", "span-destination-(fv.rtdestepg)", 4161)
    prop._addConstant("fvRtProv", "dhcp-relay-policy-(fv.rtprov)", 1432)
    prop._addConstant("fvRtToEp", "atomic-counter-policy-with-ep-as-destination-(fv.rttoep)", 4092)
    prop._addConstant("fvRtToEpForEpToEp", "end-point-to-end-point-atomic-counter-policy-(fv.rttoepforeptoep)", 4097)
    prop._addConstant("fvRtToEpForEpgToEp", "from-an-epg-to-an-ep-atomic-counter-policy-(fv.rttoepforepgtoep)", 4086)
    prop._addConstant("fvRtToEpIp", "atomic-counter-policy-with-ep-as-destination-(fv.rttoepip)", 5347)
    prop._addConstant("fvRtToEpIpForEpToEp", "end-point-to-end-point-atomic-counter-policy-(fv.rttoepipforeptoep)", 5349)
    prop._addConstant("fvRtToEpIpForEpgToEp", "from-an-epg-to-an-ep-atomic-counter-policy-(fv.rttoepipforepgtoep)", 5343)
    prop._addConstant("fvSharedService", "alloc-pctag-from-shared-service-pool-(fv.sharedservice)", 5306)
    prop._addConstant("fvSubnet", "subnet-(fv.subnet)", 1832)
    prop._addConstant("fvTabooCtxDefCont", "internal-mo-used-to-update-context-shard-with-taboo-info-(fv.tabooctxdefcont)", 5500)
    prop._addConstant("fvVDEp", "vleaf-discovered-endpoint-(fv.vdep)", 2067)
    prop._addConstant("fvcapScopeReg", "registry-mo-to-propagate-scope-limits-to-shards-(fvcap.scopereg)", 7217)
    prop._addConstant("fvnsMcastAddrInstP", "multicast-address-pool-(fvns.mcastaddrinstp)", 4565)
    prop._addConstant("fvnsVlanInstDef", "vlan-pool-defn.-(fvns.vlaninstdef)", 6872)
    prop._addConstant("fvnsVlanInstP", "vlan-pool-(fvns.vlaninstp)", 4559)
    prop._addConstant("fvnsVxlanInstDef", "vxlan-pool-defn.-(fvns.vxlaninstdef)", 4562)
    prop._addConstant("fvnsVxlanInstP", "vxlan-pool-(fvns.vxlaninstp)", 4561)
    prop._addConstant("igmpsnoopEntity", "igmp-snooping-entity-(igmpsnoop.entity)", 2725)
    prop._addConstant("igmpsnoopInst", "igmp-snooping-instance-(igmpsnoop.inst)", 2726)
    prop._addConstant("igmpsnoopRtrIf", "router-interface-(igmpsnoop.rtrif)", 2716)
    prop._addConstant("imMgmtIf", "managment-interface-(im.mgmtif)", 3651)
    prop._addConstant("imginstallRslt", "result-(imginstall.rslt)", 2869)
    prop._addConstant("infraAccBndlGrp", "pc/vpc-interface-policy-group-(infra.accbndlgrp)", 4406)
    prop._addConstant("infraAccBndlPolGrp", "pc/vpc-interface-policy-override-group-(infra.accbndlpolgrp)", 6102)
    prop._addConstant("infraAccBndlSubgrp", "override-policy-group-(infra.accbndlsubgrp)", 4416)
    prop._addConstant("infraAccCardP", "access-module-profile-(infra.acccardp)", 4366)
    prop._addConstant("infraAccCardPGrp", "access-card-policy-group-(infra.acccardpgrp)", 4375)
    prop._addConstant("infraAccGrpCfg", "access-bundle-group-config-(infra.accgrpcfg)", 6027)
    prop._addConstant("infraAccNodePGrp", "access-switch-policy-group-(infra.accnodepgrp)", 4370)
    prop._addConstant("infraAccPortGrp", "access-port-policy-group-(infra.accportgrp)", 4409)
    prop._addConstant("infraAccPortP", "interface-profile-(infra.accportp)", 4367)
    prop._addConstant("infraAttEntityP", "attachable-access-entity-profile-(infra.attentityp)", 4441)
    prop._addConstant("infraAttPolicyGroup", "access-attachable-policy-group-(infra.attpolicygroup)", 4453)
    prop._addConstant("infraBoot", "access-boot-policy-(infra.boot)", 4448)
    prop._addConstant("infraCardS", "access-module-selector-(infra.cards)", 4310)
    prop._addConstant("infraClSzEqObst", "cluster-size-equalizer-obstacle-(infra.clszeqobst)", 5535)
    prop._addConstant("infraConnFexS", "connectivity-fex-selector-(infra.connfexs)", 4298)
    prop._addConstant("infraConnNodeS", "access-connectivity-node-selector-(infra.connnodes)", 4293)
    prop._addConstant("infraCont", "cluster-(infra.cont)", 4466)
    prop._addConstant("infraContNS", "access-container-namespace-(infra.contns)", 4356)
    prop._addConstant("infraEpPD", "portgroup-(infra.eppd)", 4461)
    prop._addConstant("infraFabricRecovery", "fabric-recovery-state/status-(infra.fabricrecovery)", 7214)
    prop._addConstant("infraFexBndlGrp", "fex-bundle-group-(infra.fexbndlgrp)", 4386)
    prop._addConstant("infraFexCfg", "fex-configuration-(infra.fexcfg)", 4349)
    prop._addConstant("infraFexP", "fex-profile-(infra.fexp)", 4369)
    prop._addConstant("infraFuncP", "function-profile-(infra.funcp)", 4368)
    prop._addConstant("infraGeneric", "access-generic-(infra.generic)", 4452)
    prop._addConstant("infraHConnPortS", "connectivity-port-selector-(infra.hconnports)", 4299)
    prop._addConstant("infraHPathS", "host-path-selector-(infra.hpaths)", 6105)
    prop._addConstant("infraHPortS", "access-port-selector-(infra.hports)", 4314)
    prop._addConstant("infraHostCfg", "host-connectivity-configuration-(infra.hostcfg)", 4352)
    prop._addConstant("infraIlClMsgSrc", "controller---source-of-illegal-cluster-messages-(infra.ilclmsgsrc)", 5336)
    prop._addConstant("infraImage", "access-image-download-(infra.image)", 4451)
    prop._addConstant("infraIncmptblClsPeer", "incompatible-cluster-peer-(infra.incmptblclspeer)", 7105)
    prop._addConstant("infraIncorrectCntrlSbstState", "incorrect-controller-serial-number-state-(infra.incorrectcntrlsbststate)", 7611)
    prop._addConstant("infraInfra", "access-instance-(infra.infra)", 4513)
    prop._addConstant("infraLeafS", "switch-association-(infra.leafs)", 4307)
    prop._addConstant("infraLoNode", "controller-local-view-(infra.lonode)", 4467)
    prop._addConstant("infraMgmt", "access-management-(infra.mgmt)", 4449)
    prop._addConstant("infraNodeCfg", "access-node-configuration-(infra.nodecfg)", 4336)
    prop._addConstant("infraNodeCfgCont", "access-node-configuration-container-(infra.nodecfgcont)", 4333)
    prop._addConstant("infraNodeP", "switch-profile-(infra.nodep)", 4361)
    prop._addConstant("infraNsIssues", "access-namespace-configuration-issues-(infra.nsissues)", 4523)
    prop._addConstant("infraPeNode", "peer-controller-(infra.penode)", 4468)
    prop._addConstant("infraPodP", "pod-profile-(infra.podp)", 7048)
    prop._addConstant("infraPortBlk", "access-port-block-(infra.portblk)", 4317)
    prop._addConstant("infraPreProv", "epp-pre-provision-(infra.preprov)", 6160)
    prop._addConstant("infraProvAcc", "vlan-encapsulation-for-vxlan-traffic-(infra.provacc)", 4447)
    prop._addConstant("infraReplica", "data-shard-replica-(infra.replica)", 4489)
    prop._addConstant("infraRsAccBaseGrp", "access-access-group-(infra.rsaccbasegrp)", 4315)
    prop._addConstant("infraRsAccBndlSubgrp", "access-bundle-sub-group-(infra.rsaccbndlsubgrp)", 4318)
    prop._addConstant("infraRsAccCardP", "relation-to-access-module-profile-(infra.rsacccardp)", 4362)
    prop._addConstant("infraRsAccNodePGrp", "relation-to-node-policy-group-(infra.rsaccnodepgrp)", 4308)
    prop._addConstant("infraRsAccPortP", "interface-profile-(infra.rsaccportp)", 4364)
    prop._addConstant("infraRsAttEntP", "relation-to-access-attach-entity-policy-(infra.rsattentp)", 4404)
    prop._addConstant("infraRsBfdIpv4InstPol", "bfd-ipv4-instance-policy-(infra.rsbfdipv4instpol)", 7728)
    prop._addConstant("infraRsBfdIpv6InstPol", "bfd-ipv6-instance-policy-(infra.rsbfdipv6instpol)", 7730)
    prop._addConstant("infraRsBndlGrp", "pc/vpc-interface-policy-group-(infra.rsbndlgrp)", 7046)
    prop._addConstant("infraRsCardPGrp", "access-module-policy-group-(infra.rscardpgrp)", 4311)
    prop._addConstant("infraRsCdpIfPol", "relation-to-cdp-interface-policy-(infra.rscdpifpol)", 4392)
    prop._addConstant("infraRsConnFexS", "fex-interface-profile-(infra.rsconnfexs)", 4296)
    prop._addConstant("infraRsConnPortS", "access-interface-profile-(infra.rsconnports)", 4294)
    prop._addConstant("infraRsDomP", "domain-(infra.rsdomp)", 4442)
    prop._addConstant("infraRsFabricNode", "fabric-node-(infra.rsfabricnode)", 5244)
    prop._addConstant("infraRsFexGrp", "super-class-for-relation-from-node-to-fabric-policies-deployed-on-node-(infra.rsfexgrp)", 4350)
    prop._addConstant("infraRsFuncToEpg", "epgs-using-function-(infra.rsfunctoepg)", 4445)
    prop._addConstant("infraRsHIfPol", "relation-to-host-interface-policy-(infra.rshifpol)", 4398)
    prop._addConstant("infraRsInterfacePolProfile", "interface-profile-(infra.rsinterfacepolprofile)", 4347)
    prop._addConstant("infraRsL2IfPol", "relation-to-l2-interface-policy-(infra.rsl2ifpol)", 6141)
    prop._addConstant("infraRsL2InstPol", "relation-to-l2-instance-policy-(infra.rsl2instpol)", 4388)
    prop._addConstant("infraRsLacpIfPol", "relation-to-lacp-interface-policy-(infra.rslacpifpol)", 4417)
    prop._addConstant("infraRsLacpInterfacePol", "relation-to-lacp-interface-policy-(infra.rslacpinterfacepol)", 7473)
    prop._addConstant("infraRsLacpPol", "relation-to-lacp-lag-policy-(infra.rslacppol)", 4407)
    prop._addConstant("infraRsLldpIfPol", "relation-to-lldp-interface-policy-(infra.rslldpifpol)", 4390)
    prop._addConstant("infraRsMcpIfPol", "mis-cabling-protocol-interface-policy-(infra.rsmcpifpol)", 5878)
    prop._addConstant("infraRsModulePolProfile", "access-module-profile-(infra.rsmodulepolprofile)", 4345)
    prop._addConstant("infraRsMonFexInfraPol", "relation-to-fex-access-monitoring-policy-(infra.rsmonfexinfrapol)", 5199)
    prop._addConstant("infraRsMonIfInfraPol", "relation-to-access-monitoring-interface-policy-(infra.rsmonifinfrapol)", 4400)
    prop._addConstant("infraRsMonModuleInfraPol", "access-monitoring-policy-(infra.rsmonmoduleinfrapol)", 4382)
    prop._addConstant("infraRsMonNodeInfraPol", "relation-to-access-monitoring-policy-(infra.rsmonnodeinfrapol)", 4373)
    prop._addConstant("infraRsMstInstPol", "mst-instance-policy-(infra.rsmstinstpol)", 4371)
    prop._addConstant("infraRsNodeP", "leaf-node-profile-(infra.rsnodep)", 7049)
    prop._addConstant("infraRsNodePolGroup", "access-switch-policy-group-(infra.rsnodepolgroup)", 4343)
    prop._addConstant("infraRsOverrideCdpIfPol", "relation-to-cdp-interface-policy-(infra.rsoverridecdpifpol)", 4456)
    prop._addConstant("infraRsOverrideFwPol", "relation-to-firewall-policy-(infra.rsoverridefwpol)", 6388)
    prop._addConstant("infraRsOverrideLacpPol", "relation-to-lacp-lag-policy-(infra.rsoverridelacppol)", 4458)
    prop._addConstant("infraRsOverrideLldpIfPol", "relation-to-lldp-interface-policy-(infra.rsoverridelldpifpol)", 4454)
    prop._addConstant("infraRsOverrideMcpIfPol", "relation-to-mcp-interface-policy-(infra.rsoverridemcpifpol)", 5882)
    prop._addConstant("infraRsOverrideStpPol", "relation-to-stp-policy-(infra.rsoverridestppol)", 6781)
    prop._addConstant("infraRsPathToAccBaseGrp", "access-base-group-(infra.rspathtoaccbasegrp)", 6108)
    prop._addConstant("infraRsQosEgressDppIfPol", "data-plane-policy-egress-(infra.rsqosegressdppifpol)", 7861)
    prop._addConstant("infraRsQosIngressDppIfPol", "data-plane-policy-ingress-(infra.rsqosingressdppifpol)", 7859)
    prop._addConstant("infraRsResCdpIfPol", "cdp-interface-policy-(infra.rsrescdpifpol)", 4427)
    prop._addConstant("infraRsResErrDisRecoverPol", "error-disabled-recovery-policy-(infra.rsreserrdisrecoverpol)", 6129)
    prop._addConstant("infraRsResHIfPol", "link-level-policy-(infra.rsreshifpol)", 4431)
    prop._addConstant("infraRsResLacpIfPol", "lacp-member-policy-(infra.rsreslacpifpol)", 4425)
    prop._addConstant("infraRsResLacpLagPol", "lacp-policy-(infra.rsreslacplagpol)", 4429)
    prop._addConstant("infraRsResLldpIfPol", "lldp-interface-policy-(infra.rsreslldpifpol)", 4423)
    prop._addConstant("infraRsResLoopProtectPol", "ep-loop-protection-policy-(infra.rsresloopprotectpol)", 6077)
    prop._addConstant("infraRsResMcpIfPol", "mis-cabling-protocol-interface-policy-(infra.rsresmcpifpol)", 5880)
    prop._addConstant("infraRsResMcpInstPol", "mis-cabling-protocol-instance-policy-(infra.rsresmcpinstpol)", 6066)
    prop._addConstant("infraRsResMonInfraPol", "access-monitoring-policy-relation-(infra.rsresmoninfrapol)", 731)
    prop._addConstant("infraRsResNwsFwPol", "firewall-policy-(infra.rsresnwsfwpol)", 6386)
    prop._addConstant("infraRsResQoSPol", "qos-class-policy-(infra.rsresqospol)", 4433)
    prop._addConstant("infraRsResQosInstPol", "qos-instance-policy-(infra.rsresqosinstpol)", 4435)
    prop._addConstant("infraRsSpanVDestGrp", "relation-to-access-vspan-destination-group-(infra.rsspanvdestgrp)", 4396)
    prop._addConstant("infraRsSpanVSrcGrp", "relation-to-access-vspan-source-group-(infra.rsspanvsrcgrp)", 4394)
    prop._addConstant("infraRsStormctrlIfPol", "relation-to-storm-control-policy-(infra.rsstormctrlifpol)", 5607)
    prop._addConstant("infraRsStpIfPol", "relation-to-access-stp-interface-policy-(infra.rsstpifpol)", 4402)
    prop._addConstant("infraRsToBfdIpv4InstPol", "bfd-global-ipv4-policy-(infra.rstobfdipv4instpol)", 8687)
    prop._addConstant("infraRsToBfdIpv6InstPol", "bfd-global-ipv6-policy-(infra.rstobfdipv6instpol)", 8689)
    prop._addConstant("infraRsToEncapInstDef", "spanning-tree-encap-namespace-(infra.rstoencapinstdef)", 4357)
    prop._addConstant("infraRsToEpControlP", "ep-loop-protection-policy-(infra.rstoepcontrolp)", 7306)
    prop._addConstant("infraRsToEpLoopProtectP", "ep-loop-protection-policy-(infra.rstoeploopprotectp)", 7096)
    prop._addConstant("infraRsToErrDisRecoverPol", "error-disabled-recovery-policy-(infra.rstoerrdisrecoverpol)", 6885)
    prop._addConstant("infraRsToInfraPathS", "super-class-for-relation-from-node-to-interface-path-selector-(infra.rstoinfrapaths)", 6113)
    prop._addConstant("infraRsToInterfacePolProfile", "interface-profile-(infra.rstointerfacepolprofile)", 7475)
    prop._addConstant("infraRsToMcpIfPol", "mis-cabling-protocol-interface-policy-(infra.rstomcpifpol)", 7092)
    prop._addConstant("infraRsToMcpInstPol", "mis-cabling-protocol-instance-policy-(infra.rstomcpinstpol)", 7094)
    prop._addConstant("infraRsToPortTrackPol", "port-tracking-(infra.rstoporttrackpol)", 7657)
    prop._addConstant("infraRsVipAddrNs", "relation-to-vip-range-(infra.rsvipaddrns)", 5568)
    prop._addConstant("infraRsVlanNs", "relation-to-vlan-pool-(infra.rsvlanns)", 4515)
    prop._addConstant("infraRsVpcBndlGrp", "pc/vpc-interface-policy-group-(infra.rsvpcbndlgrp)", 4339)
    prop._addConstant("infraSelectorIssues", "access-selector-configuration-issues-(infra.selectorissues)", 4522)
    prop._addConstant("infraService", "access-service-(infra.service)", 4488)
    prop._addConstant("infraStorage", "access-storage-(infra.storage)", 4450)
    prop._addConstant("infraSubsDfltPolicy", "default-policies-subscription-(infra.subsdfltpolicy)", 6884)
    prop._addConstant("infraWiNode", "cluster-element-(infra.winode)", 4465)
    prop._addConstant("infrazoneNodeGrp", "infrastructure-zone-node-group-(infrazone.nodegrp)", 7734)
    prop._addConstant("infrazonePodGrp", "zone-pod-group-(infrazone.podgrp)", 7735)
    prop._addConstant("infrazoneRsToNodeGrp", "infrastructure-zone-node-group-(infrazone.rstonodegrp)", 7736)
    prop._addConstant("infrazoneZone", "infrastructure-zone-(infrazone.zone)", 7733)
    prop._addConstant("infrazoneZoneP", "infrastructure-zoning-profile-(infrazone.zonep)", 7732)
    prop._addConstant("ipv4Addr", "ipv4-address-(ipv4.addr)", 3792)
    prop._addConstant("ipv4Dom", "ipv4-domain-(ipv4.dom)", 3793)
    prop._addConstant("ipv4Entity", "ipv4-entity-(ipv4.entity)", 3797)
    prop._addConstant("ipv4If", "ipv4-interface-(ipv4.if)", 3794)
    prop._addConstant("ipv4Inst", "ipv4-instance-(ipv4.inst)", 3798)
    prop._addConstant("ipv4Nexthop", "ipv4-nexthop-(ipv4.nexthop)", 3796)
    prop._addConstant("ipv4Route", "ipv4-static-route-(ipv4.route)", 3795)
    prop._addConstant("ipv6Addr", "ipv6-address-(ipv6.addr)", 3591)
    prop._addConstant("ipv6Dom", "ipv6-domain-(ipv6.dom)", 3592)
    prop._addConstant("ipv6Entity", "ipv6-entity-(ipv6.entity)", 3596)
    prop._addConstant("ipv6If", "ipv6-interface-(ipv6.if)", 3593)
    prop._addConstant("ipv6Inst", "ipv6-instance-(ipv6.inst)", 3597)
    prop._addConstant("ipv6Nexthop", "ipv6-nexthop-(ipv6.nexthop)", 3595)
    prop._addConstant("ipv6Route", "ipv6-static-route-(ipv6.route)", 3594)
    prop._addConstant("isisAdjEp", "adjacency-(isis.adjep)", 2758)
    prop._addConstant("isisDb", "is-is-database-(isis.db)", 2851)
    prop._addConstant("isisDom", "is-is-domain-(isis.dom)", 2826)
    prop._addConstant("isisDomLvl", "is-is-domain-level-(isis.domlvl)", 2828)
    prop._addConstant("isisEntity", "is-is-entity-(isis.entity)", 2855)
    prop._addConstant("isisFmcastTree", "is-is-fabric-multicast-tree-(isis.fmcasttree)", 2766)
    prop._addConstant("isisGrpRec", "group-record-(isis.grprec)", 2760)
    prop._addConstant("isisIf", "is-is-interface-(isis.if)", 2834)
    prop._addConstant("isisIfLvl", "is-is-interface-policy-per-level-(isis.iflvl)", 2836)
    prop._addConstant("isisInst", "is-is-instance-(isis.inst)", 2856)
    prop._addConstant("isisRoute", "is-is-route-(isis.route)", 2838)
    prop._addConstant("isisRsNhAtt", "is-is-nexthop-attachment-(isis.rsnhatt)", 2839)
    prop._addConstant("l1PhysIf", "layer-1-physical-interface-configuration-(l1.physif)", 3627)
    prop._addConstant("l2BrIf", "layer-2-bridged-interface-(l2.brif)", 3403)
    prop._addConstant("l2ExtIf", "layer-2-extending-interface-(l2.extif)", 3400)
    prop._addConstant("l2InbandIf", "layer2-inband-interface-(l2.inbandif)", 3397)
    prop._addConstant("l2extDomP", "l2-domain-profile-(l2ext.domp)", 1744)
    prop._addConstant("l3extDomP", "l3-domain-profile-(l3ext.domp)", 1779)
    prop._addConstant("l3extRsSubnetToProfile", "route-control-profile-(l3ext.rssubnettoprofile)", 1799)
    prop._addConstant("l3extSubnetDef", "abstraction-of-external-network-instance-(l3ext.subnetdef)", 1802)
    prop._addConstant("lacpIf", "lacp-interface-(lacp.if)", 2537)
    prop._addConstant("lacpIfPol", "lacp-member-policy-(lacp.ifpol)", 154)
    prop._addConstant("lacpInst", "lacp-instance-(lacp.inst)", 2539)
    prop._addConstant("lacpLagPol", "lacp-policy-(lacp.lagpol)", 152)
    prop._addConstant("leqptLooseNode", "external-connected-node-(leqpt.loosenode)", 3362)
    prop._addConstant("lldpAdjEp", "lldp-adjacency-endpoint-(lldp.adjep)", 2728)
    prop._addConstant("lldpCtrlrAdjEp", "controller-adjacency-(lldp.ctrlradjep)", 2729)
    prop._addConstant("lldpEntity", "lldp-entity-(lldp.entity)", 2752)
    prop._addConstant("lldpIf", "lldp-interface-(lldp.if)", 2741)
    prop._addConstant("lldpIfPol", "lldp-interface-policy-(lldp.ifpol)", 691)
    prop._addConstant("lldpInst", "lldp-instance-(lldp.inst)", 2753)
    prop._addConstant("maintCatMaintP", "catalog-maitenance-policy-(maint.catmaintp)", 391)
    prop._addConstant("maintCtrlrMaintP", "controller-maintenance-policy-(maint.ctrlrmaintp)", 390)
    prop._addConstant("maintMaintGrp", "pod-maintenance-group-(maint.maintgrp)", 378)
    prop._addConstant("maintMaintP", "maintenance-policy-(maint.maintp)", 367)
    prop._addConstant("maintMaintPOnD", "on-demand-maintenance-policy-(maint.maintpond)", 368)
    prop._addConstant("maintNodeInMaint", "node-in-maintenance-(maint.nodeinmaint)", 389)
    prop._addConstant("maintPodMaintGrp", "pod-maintenance-group-(maint.podmaintgrp)", 7023)
    prop._addConstant("maintRsMgrpp", "relation-to-maintenance-policy-group-(maint.rsmgrpp)", 379)
    prop._addConstant("maintRsPolCtrlrScheduler", "relation-to-controller-schedule-policy-(maint.rspolctrlrscheduler)", 392)
    prop._addConstant("maintRsPolNotif", "relation-to-maintenance-notification-policy-(maint.rspolnotif)", 373)
    prop._addConstant("maintRsPolScheduler", "relation-to-maintenence-scheduler-policy-(maint.rspolscheduler)", 371)
    prop._addConstant("maintRsToMaintGrp", "maintanence-group-(maint.rstomaintgrp)", 7024)
    prop._addConstant("maintUpgJob", "maintenance-upgrade-job-for-a-node-(maint.upgjob)", 382)
    prop._addConstant("maintUpgJobFault", "faults-associated-upgjob-(maint.upgjobfault)", 5712)
    prop._addConstant("mcpEntity", "mcp-entity-(mcp.entity)", 2562)
    prop._addConstant("mcpIf", "mcp-interface-(mcp.if)", 2561)
    prop._addConstant("mcpInst", "mcp-instance-(mcp.inst)", 2563)
    prop._addConstant("mgmtGrp", "managed-node-connectivity-group-(mgmt.grp)", 2169)
    prop._addConstant("mgmtInBZone", "inb-managed-nodes-zone-(mgmt.inbzone)", 2176)
    prop._addConstant("mgmtMgmtIf", "management-interface-(mgmt.mgmtif)", 3633)
    prop._addConstant("mgmtNodeGrp", "node-management-address-(mgmt.nodegrp)", 2179)
    prop._addConstant("mgmtOoBZone", "oob-managed-nodes-zone-(mgmt.oobzone)", 2173)
    prop._addConstant("mgmtPodGrp", "pod-management-address-(mgmt.podgrp)", 7039)
    prop._addConstant("mgmtRsAddrInst", "relation-to-ip-address-pool-(mgmt.rsaddrinst)", 2171)
    prop._addConstant("mgmtRsGrp", "managed-node-connectivity-group-(mgmt.rsgrp)", 2180)
    prop._addConstant("mgmtRsInB", "in-band-management-epg-(mgmt.rsinb)", 7666)
    prop._addConstant("mgmtRsInbEpg", "in-band-management-epg-(mgmt.rsinbepg)", 2177)
    prop._addConstant("mgmtRsOoB", "out-of-band-management-epg-(mgmt.rsoob)", 7664)
    prop._addConstant("mgmtRsOobEpg", "out-of-band-management-epg-(mgmt.rsoobepg)", 2174)
    prop._addConstant("mgmtRsToNodeGrp", "node-management-address-(mgmt.rstonodegrp)", 7040)
    prop._addConstant("monFabricPol", "monitoring-policy-(mon.fabricpol)", 249)
    prop._addConstant("monFabricTarget", "monitoring-target-(mon.fabrictarget)", 250)
    prop._addConstant("nwConnGrp", "network-connection-group-(nw.conngrp)", 3563)
    prop._addConstant("nwPathEp", "network-path-endpoint-(nw.pathep)", 3578)
    prop._addConstant("nwsFwPol", "firewall-policy-(nws.fwpol)", 6379)
    prop._addConstant("nwsRsNwsSyslogSrcToDestGroup", "relation-to-syslog-destination-group-(nws.rsnwssyslogsrctodestgroup)", 7298)
    prop._addConstant("nwsSyslogSrc", "syslog-source-for-firewall-(nws.syslogsrc)", 7297)
    prop._addConstant("oamRsSrcEncap", "source-encapsulation-attachment-(oam.rssrcencap)", 2320)
    prop._addConstant("opflexEncapCont", "to-fix---opflex.encapcont", 8921)
    prop._addConstant("opflexIDEp", "inband-discovered-endpoint-(opflex.idep)", 1104)
    prop._addConstant("opflexODev", "openflex-device-(opflex.odev)", 1105)
    prop._addConstant("opflexPathAtt", "to-fix---opflex.pathatt", 7290)
    prop._addConstant("ospfAdjEp", "adjacency-(ospf.adjep)", 2645)
    prop._addConstant("ospfDom", "ospf-domain-(ospf.dom)", 2649)
    prop._addConstant("ospfEntity", "ospf-entity-(ospf.entity)", 2665)
    prop._addConstant("ospfIf", "ospf-interface-(ospf.if)", 2655)
    prop._addConstant("ospfInst", "ospf-instance-(ospf.inst)", 2666)
    prop._addConstant("ospfMaxLsaP", "max-lsa-(ospf.maxlsap)", 5921)
    prop._addConstant("ospfv3AdjEp", "adjacency-(ospfv3.adjep)", 5818)
    prop._addConstant("ospfv3Dom", "ospf-domain-(ospfv3.dom)", 5822)
    prop._addConstant("ospfv3Entity", "ospf-entity-(ospfv3.entity)", 5839)
    prop._addConstant("ospfv3If", "ospf-interface-(ospfv3.if)", 5828)
    prop._addConstant("ospfv3Inst", "ospf-instance-(ospfv3.inst)", 5840)
    prop._addConstant("ospfv3MaxLsaP", "max-lsa-(ospfv3.maxlsap)", 5924)
    prop._addConstant("pcAggrMbrIf", "aggregated-member-interface-(pc.aggrmbrif)", 3658)
    prop._addConstant("physDomP", "physical-domain-(phys.domp)", 1809)
    prop._addConstant("pingExecFab", "fabric-ping-exec-(ping.execfab)", 2347)
    prop._addConstant("pingExecTn", "tenant-ping-exec-(ping.exectn)", 2348)
    prop._addConstant("pkiFabricCommunicationEp", "intra-fabric-communications-policies-(pki.fabriccommunicationep)", 7602)
    prop._addConstant("pkiFabricNodeSSLCertificate", "ssl-certificate-for-each-node-(pki.fabricnodesslcertificate)", 7603)
    prop._addConstant("plannerAzureDomain", "azure-domain-(planner.azuredomain)", 7753)
    prop._addConstant("plannerAzureDomainTmpl", "azure-domain-template-(planner.azuredomaintmpl)", 7745)
    prop._addConstant("plannerBdTmpl", "bd-template-(planner.bdtmpl)", 7119)
    prop._addConstant("plannerConfigTmpl", "optimizer-config-template-(planner.configtmpl)", 7108)
    prop._addConstant("plannerCont", "optimizer-config-container-(planner.cont)", 7107)
    prop._addConstant("plannerDeployment", "deployment-(planner.deployment)", 7174)
    prop._addConstant("plannerEpgTmpl", "epg-template-(planner.epgtmpl)", 7128)
    prop._addConstant("plannerFexTmpl", "fex-(planner.fextmpl)", 7183)
    prop._addConstant("plannerGraphNode", "l4-l7-service-(planner.graphnode)", 7143)
    prop._addConstant("plannerGraphTmpl", "l4-l7-service-graph-template-(planner.graphtmpl)", 7140)
    prop._addConstant("plannerL2OutTmpl", "l2out-template-(planner.l2outtmpl)", 7136)
    prop._addConstant("plannerL3OutTmpl", "l3out-template-(planner.l3outtmpl)", 7133)
    prop._addConstant("plannerL4L7ClusterTmpl", "l4-l7-service-device-template-(planner.l4l7clustertmpl)", 7139)
    prop._addConstant("plannerLeaf", "switch-node-(planner.leaf)", 7176)
    prop._addConstant("plannerLeafTmpl", "leaf-(planner.leaftmpl)", 7182)
    prop._addConstant("plannerRsAzureDomainLabel", "label-(planner.rsazuredomainlabel)", 7746)
    prop._addConstant("plannerRsAzureDomainTmpl", "azure-domain-(planner.rsazuredomaintmpl)", 7754)
    prop._addConstant("plannerRsBdVrf", "vrf-(planner.rsbdvrf)", 7120)
    prop._addConstant("plannerRsClusterLabel", "label-(planner.rsclusterlabel)", 7453)
    prop._addConstant("plannerRsConnectedLeaf", "connected-leaf-(planner.rsconnectedleaf)", 7205)
    prop._addConstant("plannerRsConnectedSpine", "connected-spine-(planner.rsconnectedspine)", 7284)
    prop._addConstant("plannerRsConsumedContracts", "consumed-contracts-(planner.rsconsumedcontracts)", 7126)
    prop._addConstant("plannerRsDeployedFex", "deployed-fexs-(planner.rsdeployedfex)", 7184)
    prop._addConstant("plannerRsDeployedObject", "deployed-objects-(planner.rsdeployedobject)", 7177)
    prop._addConstant("plannerRsEpgBd", "bridge-domain-(planner.rsepgbd)", 7129)
    prop._addConstant("plannerRsEpgLabel", "label-(planner.rsepglabel)", 7207)
    prop._addConstant("plannerRsFexLabel", "label-(planner.rsfexlabel)", 7203)
    prop._addConstant("plannerRsGraphBd", "bd-(planner.rsgraphbd)", 7144)
    prop._addConstant("plannerRsGraphCluster", "l4l7-cluster-(planner.rsgraphcluster)", 7455)
    prop._addConstant("plannerRsGraphContracts", "contracts-(planner.rsgraphcontracts)", 7141)
    prop._addConstant("plannerRsGraphL3Out", "l3out-(planner.rsgraphl3out)", 7146)
    prop._addConstant("plannerRsGraphLabel", "label-(planner.rsgraphlabel)", 7209)
    prop._addConstant("plannerRsL2OutBd", "bd-(planner.rsl2outbd)", 7137)
    prop._addConstant("plannerRsL3OutVrf", "vrf-(planner.rsl3outvrf)", 7134)
    prop._addConstant("plannerRsLeafLabels", "labels-(planner.rsleaflabels)", 7201)
    prop._addConstant("plannerRsProvidedContracts", "provided-contracts-(planner.rsprovidedcontracts)", 7124)
    prop._addConstant("plannerRsToConsumerBd", "to-consumer-bd-(planner.rstoconsumerbd)", 7148)
    prop._addConstant("plannerRsToConsumerL3Out", "to-consumer-l3out-(planner.rstoconsumerl3out)", 7150)
    prop._addConstant("plannerRsToProviderBd", "to-provider-bd-(planner.rstoproviderbd)", 7152)
    prop._addConstant("plannerRsToProviderL3Out", "to-provider-l3out-(planner.rstoproviderl3out)", 7154)
    prop._addConstant("plannerRsVmwareDomainLabel", "label-(planner.rsvmwaredomainlabel)", 7743)
    prop._addConstant("plannerRsVmwareDomainTmpl", "vmware-domain-(planner.rsvmwaredomaintmpl)", 7751)
    prop._addConstant("plannerTenantTmpl", "optimizer-tenant-template-(planner.tenanttmpl)", 7109)
    prop._addConstant("plannerVmwareDomain", "vmware-domain-(planner.vmwaredomain)", 7750)
    prop._addConstant("plannerVmwareDomainTmpl", "vmware-domain-template-(planner.vmwaredomaintmpl)", 7742)
    prop._addConstant("polDefRelnHolder", "relation-holder-(pol.defrelnholder)", 4613)
    prop._addConstant("polRsClusterPolRel", "relation-to-admin-cluster-size-policy-(pol.rsclusterpolrel)", 4616)
    prop._addConstant("polRsDbgrConfigExportP", "config-export-policy-resolver-(pol.rsdbgrconfigexportp)", 273)
    prop._addConstant("polRsDbgrConfigImportIdP", "config-import-id-policy-resolver-(pol.rsdbgrconfigimportidp)", 7311)
    prop._addConstant("polRsDbgrConfigImportP", "config-import-policy-resolver-(pol.rsdbgrconfigimportp)", 275)
    prop._addConstant("polRsDbgrConfigRollbackP", "config-rollback-policy-resolver-(pol.rsdbgrconfigrollbackp)", 6788)
    prop._addConstant("polRsDbgrConfigSnapshotMgrP", "config-snapshot-manager-policy-resolver-(pol.rsdbgrconfigsnapshotmgrp)", 6888)
    prop._addConstant("polRsExportPRel", "export-policy-container-(pol.rsexportprel)", 4204)
    prop._addConstant("polRsFabricipv4expg", "relation-to-spine-ipv4-explicit-protection-group-(pol.rsfabricipv4expg)", 4720)
    prop._addConstant("polRsFabricmacexpg", "spine-mac-explicit-protection-group-(pol.rsfabricmacexpg)", 4722)
    prop._addConstant("polRsFirmwareRepoP", "firmware-repository-(pol.rsfirmwarerepop)", 1024)
    prop._addConstant("polRsPlgnFirmware", "relation-to-firmware-(pol.rsplgnfirmware)", 8931)
    prop._addConstant("polRsScriptHandlerLock", "resolve-script-handler-lock-(pol.rsscripthandlerlock)", 7444)
    prop._addConstant("polRsTroubleshootSessionRel", "troubleshoot-session-policy-resolver-(pol.rstroubleshootsessionrel)", 6266)
    prop._addConstant("polRsVnsmdev", "relation-to-l4-l7-service-meta-device-definition-(pol.rsvnsmdev)", 4718)
    prop._addConstant("polUni", "policy-universe-(pol.uni)", 4602)
    prop._addConstant("procEntity", "process-entity-(proc.entity)", 3915)
    prop._addConstant("procEntry", "process-entry-(proc.entry)", 3916)
    prop._addConstant("procProc", "process-(proc.proc)", 3819)
    prop._addConstant("procSystem", "system-process-information-(proc.system)", 3818)
    prop._addConstant("qosmEntity", "qos-entity-(qosm.entity)", 2393)
    prop._addConstant("qosmIf", "qos-interface-(qosm.if)", 2391)
    prop._addConstant("qosmIfClass", "qos-interface-class-(qosm.ifclass)", 2392)
    prop._addConstant("qospClass", "qos-class-(qosp.class)", 2494)
    prop._addConstant("qospDot1pRule", "dot1p-qos-classification-rule-(qosp.dot1prule)", 2501)
    prop._addConstant("qospDscpRule", "dscp-qos-classification-rule-(qosp.dscprule)", 2500)
    prop._addConstant("recoveryReconcileConfigP", "reconcile-user-config-with-leafs-(recovery.reconcileconfigp)", 7318)
    prop._addConstant("resConsumer", "resource-consumer-(res.consumer)", 308)
    prop._addConstant("satmDExtCh", "discovered-extended-chassis-(satm.dextch)", 2977)
    prop._addConstant("satmEntity", "satellite-manager-entity-(satm.entity)", 2978)
    prop._addConstant("satmFabP", "fabric-port-(satm.fabp)", 2979)
    prop._addConstant("satmRemoteFcot", "remote-fcot-(satm.remotefcot)", 2975)
    prop._addConstant("satmRemoteFcotX2", "remote-x2-fcot-(satm.remotefcotx2)", 2976)
    prop._addConstant("snmpClient", "client-entry-(snmp.client)", 2529)
    prop._addConstant("snmpClientGrp", "client-group-(snmp.clientgrp)", 2524)
    prop._addConstant("snmpConfIssues", "snmp-policy-configuration-issues-(snmp.confissues)", 5287)
    prop._addConstant("snmpEntity", "snmp-entity-(snmp.entity)", 2533)
    prop._addConstant("snmpGroup", "snmp-monitoring-destination-group-(snmp.group)", 1692)
    prop._addConstant("snmpInst", "snmp-instance-(snmp.inst)", 2534)
    prop._addConstant("snmpPol", "snmp-policy-(snmp.pol)", 4571)
    prop._addConstant("snmpRsDestGroup", "snmp-destination-group-(snmp.rsdestgroup)", 1689)
    prop._addConstant("snmpSrc", "snmp-source-(snmp.src)", 1688)
    prop._addConstant("snmpTrapDest", "snmp-trap-destination-(snmp.trapdest)", 1691)
    prop._addConstant("snmpUserSecP", "user-security-policy-(snmp.usersecp)", 2531)
    prop._addConstant("spanAcct", "span-accounting-(span.acct)", 4173)
    prop._addConstant("spanDest", "span-destination-(span.dest)", 4166)
    prop._addConstant("spanDestGrp", "span-destination-group-(span.destgrp)", 4158)
    prop._addConstant("spanERDestination", "erspan-destination-(span.erdestination)", 2332)
    prop._addConstant("spanEntity", "span-entity-(span.entity)", 2337)
    prop._addConstant("spanEpgSummary", "span-destination-epg-summary-(span.epgsummary)", 4169)
    prop._addConstant("spanFabSource", "source-(span.fabsource)", 2330)
    prop._addConstant("spanLDestination", "local-span-destination-(span.ldestination)", 2333)
    prop._addConstant("spanRsDestApic", "relation-to-span-destination-apic-(span.rsdestapic)", 6230)
    prop._addConstant("spanRsDestEpg", "relation-to-span-destination-epg-(span.rsdestepg)", 4160)
    prop._addConstant("spanRsDestPathEp", "relation-to-span-destination-path-(span.rsdestpathep)", 4164)
    prop._addConstant("spanRsDestToVPort", "relation-to-vspan-destination-vport-(span.rsdesttovport)", 4189)
    prop._addConstant("spanRsDestToVPortDef", "relation-to-vspan-destination-vport-(span.rsdesttovportdef)", 5583)
    prop._addConstant("spanRsProvDestGrp", "relation-to-span-destination-provider-group-(span.rsprovdestgrp)", 4171)
    prop._addConstant("spanRsProvToVDestGrp", "relation-to-vspan-vdestination-provider-to-group-(span.rsprovtovdestgrp)", 4195)
    prop._addConstant("spanRsSessionToDomainRef", "relation-from-session-to-aaa-domain-ref-(span.rssessiontodomainref)", 5633)
    prop._addConstant("spanRsSpanSrcToL1IfAtt", "l1-interface-attachment-(span.rsspansrctol1ifatt)", 2325)
    prop._addConstant("spanRsSpanSrcToL2CktEpAtt", "relation-to-span-circuit-endpoint-(span.rsspansrctol2cktepatt)", 2328)
    prop._addConstant("spanRsSrcToBDDef", "source-to-bddef-relation-(span.rssrctobddef)", 4148)
    prop._addConstant("spanRsSrcToCtxDef", "source-to-ctxdef-relation-(span.rssrctoctxdef)", 4152)
    prop._addConstant("spanRsSrcToEpP", "relation-to-span-source-to-end-point-profile-(span.rssrctoepp)", 4144)
    prop._addConstant("spanRsSrcToEpg", "relation-to-span-source-to-epg-(span.rssrctoepg)", 4141)
    prop._addConstant("spanRsSrcToPathEp", "relation-to-span-source-to-path-endpoint-(span.rssrctopathep)", 4137)
    prop._addConstant("spanRsSrcToVPort", "relation-to-span-source-to-port-(span.rssrctovport)", 4176)
    prop._addConstant("spanRsSrcToVPortDef", "relation-to-span-source-to-port-(span.rssrctovportdef)", 5581)
    prop._addConstant("spanSession", "session-(span.session)", 2323)
    prop._addConstant("spanSource", "fabric-span-source-(span.source)", 2327)
    prop._addConstant("spanSpanLbl", "span-source-destination-group-match-label-(span.spanlbl)", 4156)
    prop._addConstant("spanSpanLblDef", "span-label-def.-(span.spanlbldef)", 4157)
    prop._addConstant("spanSpanProv", "span-destination-provider-(span.spanprov)", 4170)
    prop._addConstant("spanSrc", "span-source-(span.src)", 4143)
    prop._addConstant("spanSrcDef", "span-source-definition-(span.srcdef)", 4154)
    prop._addConstant("spanSrcGrp", "span-source-group-(span.srcgrp)", 4131)
    prop._addConstant("spanTaskParam", "relation-to-span-src-epg-container-(span.taskparam)", 4174)
    prop._addConstant("spanVDest", "vspan-vdestination-(span.vdest)", 4191)
    prop._addConstant("spanVDestGrp", "vspan-destination-group-(span.vdestgrp)", 4186)
    prop._addConstant("spanVEpgSummary", "vspan-destination-epg-summary-(span.vepgsummary)", 5329)
    prop._addConstant("spanVEpgSummaryDef", "copy-of-vspan-epg-summary-definition-(span.vepgsummarydef)", 4193)
    prop._addConstant("spanVSpanProv", "vspan-vdestination-provider-(span.vspanprov)", 4194)
    prop._addConstant("spanVSrc", "vspan-vsource-(span.vsrc)", 4178)
    prop._addConstant("spanVSrcDef", "abstract-vspan-source-definition-(span.vsrcdef)", 4179)
    prop._addConstant("spanVSrcGrp", "vspan-session-(span.vsrcgrp)", 4183)
    prop._addConstant("statsDestP", "stats-destination-(stats.destp)", 332)
    prop._addConstant("statsExportJob", "job-container-(stats.exportjob)", 335)
    prop._addConstant("statsExportP", "export-policy-of-an-user-(stats.exportp)", 331)
    prop._addConstant("statsExportStatusCont", "status-container-(stats.exportstatuscont)", 333)
    prop._addConstant("statsReportable", "statistics-policy-(stats.reportable)", 54)
    prop._addConstant("statsShardExportSubJob", "shard-subjob-status-container-(stats.shardexportsubjob)", 336)
    prop._addConstant("stormctrlIfPol", "storm-control-interface-policy-(stormctrl.ifpol)", 5606)
    prop._addConstant("stpAllocEncapBlkDef", "spanning-tree-encap-block-(stp.allocencapblkdef)", 572)
    prop._addConstant("stpAllocEncapCont", "spanning-tree-allocated-encap-container-(stp.allocencapcont)", 575)
    prop._addConstant("stpEncapInstDef", "spanning-tree-encap-namespace-(stp.encapinstdef)", 570)
    prop._addConstant("stpIfPol", "spanning-tree-interface-policy-(stp.ifpol)", 568)
    prop._addConstant("svccoreCtrlr", "history-of-metadata-for-a-core-generated-at-ctrlr-(svccore.ctrlr)", 4199)
    prop._addConstant("svccoreNode", "history-of-metadata-for-a-core-generated-at-a-fabric-node-(svccore.node)", 4203)
    prop._addConstant("syntheticIfcCTestObj", "synthetic-ifc-c-test-object-(synthetic.ifcctestobj)", 4271)
    prop._addConstant("syntheticIfcTLTestObj", "synthetic-ifc-tl-test-object-(synthetic.ifctltestobj)", 4268)
    prop._addConstant("syntheticRsToAObj", "to-fix---synthetic.rstoaobj", 6925)
    prop._addConstant("syntheticRsToObj", "to-fix---synthetic.rstoobj", 4273)
    prop._addConstant("syntheticSwCTestObj", "synthetic-sw-c-test-object-(synthetic.swctestobj)", 4272)
    prop._addConstant("syntheticSwTLTestObj", "synthetic-sw-tl-test-object-(synthetic.swtltestobj)", 4269)
    prop._addConstant("sysdebugCore", "core-dump-file-(sysdebug.core)", 317)
    prop._addConstant("sysdebugCoreFileRepository", "core-file-repository-(sysdebug.corefilerepository)", 311)
    prop._addConstant("sysdebugEp", "system-debug-container-(sysdebug.ep)", 309)
    prop._addConstant("sysdebugLogControlEp", "log-control-endpoint-(sysdebug.logcontrolep)", 321)
    prop._addConstant("sysdebugTechSupFileRepository", "techsupport-repository-(sysdebug.techsupfilerepository)", 318)
    prop._addConstant("sysdebugTechSupport", "techsupport-file-(sysdebug.techsupport)", 319)
    prop._addConstant("syslogDestState", "syslog-destination-state-(syslog.deststate)", 5543)
    prop._addConstant("syslogGroup", "syslog-monitoring-destination-group-(syslog.group)", 1719)
    prop._addConstant("syslogRemoteDest", "syslog-remote-destination-(syslog.remotedest)", 1716)
    prop._addConstant("syslogRsDestGroup", "relation-to-syslog-destination-group-(syslog.rsdestgroup)", 1714)
    prop._addConstant("syslogSrc", "syslog-source-(syslog.src)", 1713)
    prop._addConstant("tagAliasDef", "alias-(tag.aliasdef)", 1655)
    prop._addConstant("tagAliasDelInst", "deleted-alias-(tag.aliasdelinst)", 1660)
    prop._addConstant("tagAliasInst", "alias-tag-(tag.aliasinst)", 1659)
    prop._addConstant("tagDef", "tag-definition-(tag.def)", 1654)
    prop._addConstant("tagInst", "tag-instance-(tag.inst)", 1658)
    prop._addConstant("tagRef", "tag-reference-(tag.ref)", 1656)
    prop._addConstant("topSystem", "system-(top.system)", 3)
    prop._addConstant("tracerouteExecFab", "fabric-traceroute-exec-(traceroute.execfab)", 2508)
    prop._addConstant("tracerouteExecTn", "tenant-traceroute-exec-(traceroute.exectn)", 2509)
    prop._addConstant("traceroutepTrNode", "traceroute-policy-(traceroutep.trnode)", 4223)
    prop._addConstant("trigRsTriggerable", "relation-to-triggerable-policy-(trig.rstriggerable)", 1826)
    prop._addConstant("troubleshootRsSessionScheduler", "relation-to-a-scheduler-policy-(troubleshoot.rssessionscheduler)", 6268)
    prop._addConstant("troubleshootSession", "troubleshoot-session-mo-(troubleshoot.session)", 6241)
    prop._addConstant("tunnelIf", "tunnel-interface-(tunnel.if)", 3677)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("uribv4Entity", "ipv4-unicast-routing-information-base-entity-(uribv4.entity)", 3776)
    prop._addConstant("vnsAbsCfgRel", "l4-l7-services-relation-(vns.abscfgrel)", 4641)
    prop._addConstant("vnsAbsDevCfg", "l4-l7-services-device-shared-config-(vns.absdevcfg)", 4647)
    prop._addConstant("vnsAbsFolder", "l4-l7-services-folder-(vns.absfolder)", 4640)
    prop._addConstant("vnsAbsFuncCfg", "l4-l7-services-function-config-(vns.absfunccfg)", 4651)
    prop._addConstant("vnsAbsFuncProf", "l4-l7-services-function-profile-(vns.absfuncprof)", 4644)
    prop._addConstant("vnsAbsFuncProfContr", "l4-l7-services-function-profile-group-(vns.absfuncprofcontr)", 4642)
    prop._addConstant("vnsAbsFuncProfGrp", "l4-l7-services-function-profile-group-(vns.absfuncprofgrp)", 4643)
    prop._addConstant("vnsAbsGrpCfg", "l4-l7-services-group-shared-config-(vns.absgrpcfg)", 4650)
    prop._addConstant("vnsAbsParam", "l4-l7-services-parameter-(vns.absparam)", 4639)
    prop._addConstant("vnsCDevState", "state-of-the-device-(vns.cdevstate)", 4853)
    prop._addConstant("vnsCFolder", "concrete-folder-(vns.cfolder)", 4863)
    prop._addConstant("vnsCMgmtProxy", "state-of-the-management-interface-of-device-(vns.cmgmtproxy)", 5305)
    prop._addConstant("vnsCParam", "concrete-parameter-(vns.cparam)", 4866)
    prop._addConstant("vnsCRel", "concrete-relation-(vns.crel)", 4867)
    prop._addConstant("vnsCfgRelInst", "relation-to-l4-l7-services-param-relation-abstract-class-(vns.cfgrelinst)", 4797)
    prop._addConstant("vnsCfgRoot", "root-node-for-configuration-tree.-(vns.cfgroot)", 4857)
    prop._addConstant("vnsClusterCfg", "l4-l7-service-meta-device-cluster-config-(vns.clustercfg)", 4749)
    prop._addConstant("vnsConfIssue", "config-issue-holder-(vns.confissue)", 6249)
    prop._addConstant("vnsCtrlrEpProxy", "state-of-the-management-interface-of-device-(vns.ctrlrepproxy)", 4855)
    prop._addConstant("vnsDevCfg", "l4-l7-service-meta-device-dev-config-(vns.devcfg)", 4750)
    prop._addConstant("vnsDevConfIssue", "abstract-base-for-attaching-faults-(vns.devconfissue)", 7668)
    prop._addConstant("vnsDevHealth", "abstract-base-for-attaching-faults-(vns.devhealth)", 4856)
    prop._addConstant("vnsDevPing", "cdev-ping-policy-(vns.devping)", 4948)
    prop._addConstant("vnsDevScript", "device-script-(vns.devscript)", 4746)
    prop._addConstant("vnsEPpContr", "service-vdev-epp-container-(vns.eppcontr)", 4693)
    prop._addConstant("vnsEPpInfo", "service-vdev-epp-information-(vns.eppinfo)", 4694)
    prop._addConstant("vnsFolderInst", "l4-l7-folder-instance-(vns.folderinst)", 4794)
    prop._addConstant("vnsGFolder", "l4-l7-services-folder-(vns.gfolder)", 4789)
    prop._addConstant("vnsGParam", "l4-l7-services-parameter-(vns.gparam)", 4788)
    prop._addConstant("vnsGRel", "l4-l7-services-relation-(vns.grel)", 4792)
    prop._addConstant("vnsLDevOperInfo", "logical-device-operational-information-(vns.ldevoperinfo)", 4895)
    prop._addConstant("vnsMChassis", "l4-l7-chassis-type-(vns.mchassis)", 6161)
    prop._addConstant("vnsMConn", "l4-l7-service-meta-function-connector-(vns.mconn)", 4756)
    prop._addConstant("vnsMDev", "l4-l7-service-device-type-(vns.mdev)", 4742)
    prop._addConstant("vnsMDevCfg", "l4-l7-service-meta-device-shared-config-(vns.mdevcfg)", 4751)
    prop._addConstant("vnsMDevMgr", "l4-l7-device-manager-type-(vns.mdevmgr)", 6164)
    prop._addConstant("vnsMDfct", "l4-l7-service-vendor-defined-defect-(vns.mdfct)", 4768)
    prop._addConstant("vnsMDfcts", "l4-l7-service-vendor-defined-defect-container-(vns.mdfcts)", 4767)
    prop._addConstant("vnsMFolder", "l4-l7-services-meta-folder-(vns.mfolder)", 4736)
    prop._addConstant("vnsMFunc", "l4-l7-service-function-(vns.mfunc)", 4753)
    prop._addConstant("vnsMGrpCfg", "l4-l7-service-meta-group-shared-config-(vns.mgrpcfg)", 4752)
    prop._addConstant("vnsMParam", "l4-l7-services-meta-parameter-(vns.mparam)", 4737)
    prop._addConstant("vnsMRel", "l4-l7-services-meta-relation-(vns.mrel)", 4738)
    prop._addConstant("vnsParamInst", "l4-l7-param-instance-(vns.paraminst)", 4793)
    prop._addConstant("vnsRTInfo", "contains-runtime-info-of-a-script-(vns.rtinfo)", 5381)
    prop._addConstant("vnsRndrInfo", "service-vdev-rendering-information-(vns.rndrinfo)", 4692)
    prop._addConstant("vnsRsCfgToConn", "relation-from-abstract-configuration-to-a-connector-(vns.rscfgtoconn)", 4859)
    prop._addConstant("vnsRsCfgToVConn", "relation-from-abstract-configuration-to-a-virtual-connector-(vns.rscfgtovconn)", 4861)
    prop._addConstant("vnsRsConnector", "relation-to-l4-l7-service-configuration-meta-connector-(vns.rsconnector)", 4734)
    prop._addConstant("vnsRsDevPingToCDev", "relation-from-a-device-ping-object-to-a-concrete-service-device-(vns.rsdevpingtocdev)", 4949)
    prop._addConstant("vnsRsDfctToCat", "relation-to-l4-l7-service-vendor-to-cisco-defined-defect-(vns.rsdfcttocat)", 4769)
    prop._addConstant("vnsRsEPpInfoToBD", "bridge-domain-(vns.rseppinfotobd)", 5488)
    prop._addConstant("vnsRsFolderInstToMFolder", "l4-l7-services-meta-folder-(vns.rsfolderinsttomfolder)", 4795)
    prop._addConstant("vnsRsInterface", "relation-to-l4-l7-service-connector-interface-label-(vns.rsinterface)", 4757)
    prop._addConstant("vnsRsMChassisToMDev", "l4-l7-service-device-type-(vns.rsmchassistomdev)", 6162)
    prop._addConstant("vnsRsMDevMgrToMDev", "l4-l7-service-device-type-(vns.rsmdevmgrtomdev)", 6165)
    prop._addConstant("vnsRsProfToMFunc", "relation-to-l4-l7-services-function-profile-meta-func.-(vns.rsproftomfunc)", 4645)
    prop._addConstant("vnsRsScopeToTerm", "relation-to-abstract-folder-contract-terminal-(vns.rsscopetoterm)", 4635)
    prop._addConstant("vnsRsScriptHandlerStateToDomainRef", "relation-from-vdev-to-aaa-domain-ref-(vns.rsscripthandlerstatetodomainref)", 5322)
    prop._addConstant("vnsRsTarget", "relation-to-l4-l7-services-target-meta-folder-(vns.rstarget)", 4739)
    prop._addConstant("vnsRsVDevDomainRefContToDomainRef", "relation-from-vdev-domainref-container-to-aaa-domain-ref-(vns.rsvdevdomainrefconttodomainref)", 6071)
    prop._addConstant("vnsRsVDevToDomainRef", "relation-from-vdev-to-aaa-domain-ref-(vns.rsvdevtodomainref)", 5295)
    prop._addConstant("vnsSDEPpInfo", "ldev-instance-(vns.sdeppinfo)", 5958)
    prop._addConstant("vnsSHSEPpInfo", "service-vdev-epp-information-(vns.shseppinfo)", 6214)
    prop._addConstant("vnsSLDevInst", "ldev-instance-(vns.sldevinst)", 5967)
    prop._addConstant("vnsScriptHandlerState", "container-for-internal-state-of-scripthandler-(vns.scripthandlerstate)", 4850)
    prop._addConstant("vnsScriptHandlerUserState", "container-for-user-modifiable-state-of-scripthandler-(vns.scripthandleruserstate)", 4851)
    prop._addConstant("vnsSvcPkgSource", "service-device-pkg.-installer-(vns.svcpkgsource)", 4741)
    prop._addConstant("vnsSvcVipUpdate", "svc-vip-update-(vns.svcvipupdate)", 6837)
    prop._addConstant("vnsVBgpDevCfg", "bgp-configuration-(vns.vbgpdevcfg)", 5994)
    prop._addConstant("vnsVBgpVEncapAsc", "bgp-connector-configuration-(vns.vbgpvencapasc)", 6152)
    prop._addConstant("vnsVConn", "function-connector-(vns.vconn)", 4906)
    prop._addConstant("vnsVDev", "virtual-device-(vns.vdev)", 4899)
    prop._addConstant("vnsVDevDomainRefCont", "vdev-domainref-container-(vns.vdevdomainrefcont)", 6070)
    prop._addConstant("vnsVDevOperInfo", "logical-device-operational-information-(vns.vdevoperinfo)", 5469)
    prop._addConstant("vnsVEncap", "encap-information-(vns.vencap)", 4940)
    prop._addConstant("vnsVEncapAsc", "encap-association-(vns.vencapasc)", 4919)
    prop._addConstant("vnsVFunc", "service-function-(vns.vfunc)", 4903)
    prop._addConstant("vnsVGrp", "function-group-(vns.vgrp)", 4902)
    prop._addConstant("vnsVIf", "interface-(vns.vif)", 4916)
    prop._addConstant("vnsVOspfDevCfg", "ospf-configuration-(vns.vospfdevcfg)", 5993)
    prop._addConstant("vnsVOspfVEncapAsc", "ospf-connector-configuration-(vns.vospfvencapasc)", 6151)
    prop._addConstant("vpcDom", "vpc-domain-(vpc.dom)", 3433)
    prop._addConstant("vpcEntity", "vpc-entity-(vpc.entity)", 3431)
    prop._addConstant("vpcIf", "vpc-interface-(vpc.if)", 3428)
    prop._addConstant("vpcInst", "vpc-instance-(vpc.inst)", 3432)
    prop._addConstant("vpcKeepalive", "vpc-keepalive-policy-(vpc.keepalive)", 3436)
    prop._addConstant("vpcRsVpcConf", "port-channel-attachment-(vpc.rsvpcconf)", 3429)
    prop._addConstant("vzAnyDef", "to-fix---vz.anydef", 5642)
    prop._addConstant("vzAnyDefCont", "vzanydef-container-(vz.anydefcont)", 5641)
    prop._addConstant("vzRsFiltGraphAtt", "relation-to-filter-graph-attachment-(vz.rsfiltgraphatt)", 1315)
    prop._addConstant("vzToEPgAny", "to-epg-(vz.toepgany)", 5638)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "scope"))

    def __init__(self, parentMoOrDn, scope, markDirty=True, **creationProps):
        namingVals = [scope]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
